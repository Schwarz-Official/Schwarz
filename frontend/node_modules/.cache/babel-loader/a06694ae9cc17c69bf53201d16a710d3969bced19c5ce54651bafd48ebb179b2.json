{"ast":null,"code":"'use strict';\n\nlet Declaration = require('./declaration');\nlet PreviousMap = require('./previous-map');\nlet Comment = require('./comment');\nlet AtRule = require('./at-rule');\nlet Input = require('./input');\nlet Root = require('./root');\nlet Rule = require('./rule');\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n));\n  let {\n    inputs: ownInputs,\n    ...defaults\n  } = json;\n  if (ownInputs) {\n    inputs = [];\n    for (let input of ownInputs) {\n      let inputHydrated = {\n        ...input,\n        __proto__: Input.prototype\n      };\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        };\n      }\n      inputs.push(inputHydrated);\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs));\n  }\n  if (defaults.source) {\n    let {\n      inputId,\n      ...source\n    } = defaults.source;\n    defaults.source = source;\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId];\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults);\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults);\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults);\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults);\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults);\n  } else {\n    throw new Error('Unknown node type: ' + json.type);\n  }\n}\nmodule.exports = fromJSON;\nfromJSON.default = fromJSON;","map":{"version":3,"names":["Declaration","require","PreviousMap","Comment","AtRule","Input","Root","Rule","fromJSON","json","inputs","Array","isArray","map","n","ownInputs","defaults","input","inputHydrated","__proto__","prototype","push","nodes","source","inputId","type","Error","module","exports","default"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/postcss/lib/fromJSON.js"],"sourcesContent":["'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIC,WAAW,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC3C,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIG,MAAM,GAAGH,OAAO,CAAC,WAAW,CAAC;AACjC,IAAII,KAAK,GAAGJ,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAQ,CAAC;AAE5B,SAASO,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAE;EAC9B,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE,OAAOA,IAAI,CAACI,GAAG,CAACC,CAAC,IAAIN,QAAQ,CAACM,CAAC,CAAC,CAAC;EAE1D,IAAI;IAAEJ,MAAM,EAAEK,SAAS;IAAE,GAAGC;EAAS,CAAC,GAAGP,IAAI;EAC7C,IAAIM,SAAS,EAAE;IACbL,MAAM,GAAG,EAAE;IACX,KAAK,IAAIO,KAAK,IAAIF,SAAS,EAAE;MAC3B,IAAIG,aAAa,GAAG;QAAE,GAAGD,KAAK;QAAEE,SAAS,EAAEd,KAAK,CAACe;MAAU,CAAC;MAC5D,IAAIF,aAAa,CAACL,GAAG,EAAE;QACrBK,aAAa,CAACL,GAAG,GAAG;UAClB,GAAGK,aAAa,CAACL,GAAG;UACpBM,SAAS,EAAEjB,WAAW,CAACkB;QACzB,CAAC;MACH;MACAV,MAAM,CAACW,IAAI,CAACH,aAAa,CAAC;IAC5B;EACF;EACA,IAAIF,QAAQ,CAACM,KAAK,EAAE;IAClBN,QAAQ,CAACM,KAAK,GAAGb,IAAI,CAACa,KAAK,CAACT,GAAG,CAACC,CAAC,IAAIN,QAAQ,CAACM,CAAC,EAAEJ,MAAM,CAAC,CAAC;EAC3D;EACA,IAAIM,QAAQ,CAACO,MAAM,EAAE;IACnB,IAAI;MAAEC,OAAO;MAAE,GAAGD;IAAO,CAAC,GAAGP,QAAQ,CAACO,MAAM;IAC5CP,QAAQ,CAACO,MAAM,GAAGA,MAAM;IACxB,IAAIC,OAAO,IAAI,IAAI,EAAE;MACnBR,QAAQ,CAACO,MAAM,CAACN,KAAK,GAAGP,MAAM,CAACc,OAAO,CAAC;IACzC;EACF;EACA,IAAIR,QAAQ,CAACS,IAAI,KAAK,MAAM,EAAE;IAC5B,OAAO,IAAInB,IAAI,CAACU,QAAQ,CAAC;EAC3B,CAAC,MAAM,IAAIA,QAAQ,CAACS,IAAI,KAAK,MAAM,EAAE;IACnC,OAAO,IAAIzB,WAAW,CAACgB,QAAQ,CAAC;EAClC,CAAC,MAAM,IAAIA,QAAQ,CAACS,IAAI,KAAK,MAAM,EAAE;IACnC,OAAO,IAAIlB,IAAI,CAACS,QAAQ,CAAC;EAC3B,CAAC,MAAM,IAAIA,QAAQ,CAACS,IAAI,KAAK,SAAS,EAAE;IACtC,OAAO,IAAItB,OAAO,CAACa,QAAQ,CAAC;EAC9B,CAAC,MAAM,IAAIA,QAAQ,CAACS,IAAI,KAAK,QAAQ,EAAE;IACrC,OAAO,IAAIrB,MAAM,CAACY,QAAQ,CAAC;EAC7B,CAAC,MAAM;IACL,MAAM,IAAIU,KAAK,CAAC,qBAAqB,GAAGjB,IAAI,CAACgB,IAAI,CAAC;EACpD;AACF;AAEAE,MAAM,CAACC,OAAO,GAAGpB,QAAQ;AACzBA,QAAQ,CAACqB,OAAO,GAAGrB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}