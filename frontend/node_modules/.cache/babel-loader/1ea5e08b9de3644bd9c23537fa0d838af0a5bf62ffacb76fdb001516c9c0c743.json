{"ast":null,"code":"import { ContextualKeyword } from \"../parser/tokenizer/keywords\";\nimport { TokenType as tt } from \"../parser/tokenizer/types\";\n\n/**\n * Starting at `export {`, look ahead and return `true` if this is an\n * `export {...} from` statement and `false` if this is a plain multi-export.\n */\nexport default function isExportFrom(tokens) {\n  let closeBraceIndex = tokens.currentIndex();\n  while (!tokens.matches1AtIndex(closeBraceIndex, tt.braceR)) {\n    closeBraceIndex++;\n  }\n  return tokens.matchesContextualAtIndex(closeBraceIndex + 1, ContextualKeyword._from) && tokens.matches1AtIndex(closeBraceIndex + 2, tt.string);\n}","map":{"version":3,"names":["ContextualKeyword","TokenType","tt","isExportFrom","tokens","closeBraceIndex","currentIndex","matches1AtIndex","braceR","matchesContextualAtIndex","_from","string"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/sucrase/dist/esm/util/isExportFrom.js"],"sourcesContent":["import {ContextualKeyword} from \"../parser/tokenizer/keywords\";\nimport {TokenType as tt} from \"../parser/tokenizer/types\";\n\n\n/**\n * Starting at `export {`, look ahead and return `true` if this is an\n * `export {...} from` statement and `false` if this is a plain multi-export.\n */\nexport default function isExportFrom(tokens) {\n  let closeBraceIndex = tokens.currentIndex();\n  while (!tokens.matches1AtIndex(closeBraceIndex, tt.braceR)) {\n    closeBraceIndex++;\n  }\n  return (\n    tokens.matchesContextualAtIndex(closeBraceIndex + 1, ContextualKeyword._from) &&\n    tokens.matches1AtIndex(closeBraceIndex + 2, tt.string)\n  );\n}\n"],"mappings":"AAAA,SAAQA,iBAAiB,QAAO,8BAA8B;AAC9D,SAAQC,SAAS,IAAIC,EAAE,QAAO,2BAA2B;;AAGzD;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAACC,MAAM,EAAE;EAC3C,IAAIC,eAAe,GAAGD,MAAM,CAACE,YAAY,CAAC,CAAC;EAC3C,OAAO,CAACF,MAAM,CAACG,eAAe,CAACF,eAAe,EAAEH,EAAE,CAACM,MAAM,CAAC,EAAE;IAC1DH,eAAe,EAAE;EACnB;EACA,OACED,MAAM,CAACK,wBAAwB,CAACJ,eAAe,GAAG,CAAC,EAAEL,iBAAiB,CAACU,KAAK,CAAC,IAC7EN,MAAM,CAACG,eAAe,CAACF,eAAe,GAAG,CAAC,EAAEH,EAAE,CAACS,MAAM,CAAC;AAE1D"},"metadata":{},"sourceType":"module","externalDependencies":[]}