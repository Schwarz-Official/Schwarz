{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"backgroundSize\", {\n  enumerable: true,\n  get: function () {\n    return backgroundSize;\n  }\n});\nconst _dataTypes = require(\"./dataTypes\");\nconst _splitAtTopLevelOnly = require(\"./splitAtTopLevelOnly\");\nfunction backgroundSize(value) {\n  let keywordValues = [\"cover\", \"contain\"];\n  // the <length-percentage> type will probably be a css function\n  // so we have to use `splitAtTopLevelOnly`\n  return (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, \",\").every(part => {\n    let sizes = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(part, \"_\").filter(Boolean);\n    if (sizes.length === 1 && keywordValues.includes(sizes[0])) return true;\n    if (sizes.length !== 1 && sizes.length !== 2) return false;\n    return sizes.every(size => (0, _dataTypes.length)(size) || (0, _dataTypes.percentage)(size) || size === \"auto\");\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","backgroundSize","_dataTypes","require","_splitAtTopLevelOnly","keywordValues","splitAtTopLevelOnly","every","part","sizes","filter","Boolean","length","includes","size","percentage"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/validateFormalSyntax.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"backgroundSize\", {\n    enumerable: true,\n    get: function() {\n        return backgroundSize;\n    }\n});\nconst _dataTypes = require(\"./dataTypes\");\nconst _splitAtTopLevelOnly = require(\"./splitAtTopLevelOnly\");\nfunction backgroundSize(value) {\n    let keywordValues = [\n        \"cover\",\n        \"contain\"\n    ];\n    // the <length-percentage> type will probably be a css function\n    // so we have to use `splitAtTopLevelOnly`\n    return (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, \",\").every((part)=>{\n        let sizes = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(part, \"_\").filter(Boolean);\n        if (sizes.length === 1 && keywordValues.includes(sizes[0])) return true;\n        if (sizes.length !== 1 && sizes.length !== 2) return false;\n        return sizes.every((size)=>(0, _dataTypes.length)(size) || (0, _dataTypes.percentage)(size) || size === \"auto\");\n    });\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,gBAAgB,EAAE;EAC7CE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,cAAc;EACzB;AACJ,CAAC,CAAC;AACF,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAC7D,SAASF,cAAcA,CAACH,KAAK,EAAE;EAC3B,IAAIO,aAAa,GAAG,CAChB,OAAO,EACP,SAAS,CACZ;EACD;EACA;EACA,OAAO,CAAC,CAAC,EAAED,oBAAoB,CAACE,mBAAmB,EAAER,KAAK,EAAE,GAAG,CAAC,CAACS,KAAK,CAAEC,IAAI,IAAG;IAC3E,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAEL,oBAAoB,CAACE,mBAAmB,EAAEE,IAAI,EAAE,GAAG,CAAC,CAACE,MAAM,CAACC,OAAO,CAAC;IACpF,IAAIF,KAAK,CAACG,MAAM,KAAK,CAAC,IAAIP,aAAa,CAACQ,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,IAAI;IACvE,IAAIA,KAAK,CAACG,MAAM,KAAK,CAAC,IAAIH,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;IAC1D,OAAOH,KAAK,CAACF,KAAK,CAAEO,IAAI,IAAG,CAAC,CAAC,EAAEZ,UAAU,CAACU,MAAM,EAAEE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAEZ,UAAU,CAACa,UAAU,EAAED,IAAI,CAAC,IAAIA,IAAI,KAAK,MAAM,CAAC;EACnH,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"script","externalDependencies":[]}