{"ast":null,"code":"/**\n * This function removes any uses of CSS variables used as an alpha channel\n *\n * This is required for selectors like `:visited` which do not allow\n * changes in opacity or external control using CSS variables.\n *\n * @param {import('postcss').Container} container\n * @param {string[]} toRemove\n */\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"removeAlphaVariables\", {\n  enumerable: true,\n  get: function () {\n    return removeAlphaVariables;\n  }\n});\nfunction removeAlphaVariables(container, toRemove) {\n  container.walkDecls(decl => {\n    if (toRemove.includes(decl.prop)) {\n      decl.remove();\n      return;\n    }\n    for (let varName of toRemove) {\n      if (decl.value.includes(`/ var(${varName})`)) {\n        decl.value = decl.value.replace(`/ var(${varName})`, \"\");\n      }\n    }\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","removeAlphaVariables","container","toRemove","walkDecls","decl","includes","prop","remove","varName","replace"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/removeAlphaVariables.js"],"sourcesContent":["/**\n * This function removes any uses of CSS variables used as an alpha channel\n *\n * This is required for selectors like `:visited` which do not allow\n * changes in opacity or external control using CSS variables.\n *\n * @param {import('postcss').Container} container\n * @param {string[]} toRemove\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"removeAlphaVariables\", {\n    enumerable: true,\n    get: function() {\n        return removeAlphaVariables;\n    }\n});\nfunction removeAlphaVariables(container, toRemove) {\n    container.walkDecls((decl)=>{\n        if (toRemove.includes(decl.prop)) {\n            decl.remove();\n            return;\n        }\n        for (let varName of toRemove){\n            if (decl.value.includes(`/ var(${varName})`)) {\n                decl.value = decl.value.replace(`/ var(${varName})`, \"\");\n            }\n        }\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAI,YAAY;;AAChBA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,sBAAsB,EAAE;EACnDE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,oBAAoB;EAC/B;AACJ,CAAC,CAAC;AACF,SAASA,oBAAoBA,CAACC,SAAS,EAAEC,QAAQ,EAAE;EAC/CD,SAAS,CAACE,SAAS,CAAEC,IAAI,IAAG;IACxB,IAAIF,QAAQ,CAACG,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,EAAE;MAC9BF,IAAI,CAACG,MAAM,CAAC,CAAC;MACb;IACJ;IACA,KAAK,IAAIC,OAAO,IAAIN,QAAQ,EAAC;MACzB,IAAIE,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAAE,SAAQG,OAAQ,GAAE,CAAC,EAAE;QAC1CJ,IAAI,CAACP,KAAK,GAAGO,IAAI,CAACP,KAAK,CAACY,OAAO,CAAE,SAAQD,OAAQ,GAAE,EAAE,EAAE,CAAC;MAC5D;IACJ;EACJ,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"script","externalDependencies":[]}