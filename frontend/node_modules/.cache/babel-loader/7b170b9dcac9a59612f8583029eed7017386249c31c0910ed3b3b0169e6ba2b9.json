{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return negateValue;\n  }\n});\nfunction negateValue(value) {\n  value = `${value}`;\n  if (value === \"0\") {\n    return \"0\";\n  }\n  // Flip sign of numbers\n  if (/^[+-]?(\\d+|\\d*\\.\\d+)(e[+-]?\\d+)?(%|\\w+)?$/.test(value)) {\n    return value.replace(/^[+-]?/, sign => sign === \"-\" ? \"\" : \"-\");\n  }\n  // What functions we support negating numeric values for\n  // var() isn't inherently a numeric function but we support it anyway\n  // The trigonometric functions are omitted because you'll need to use calc(…) with them _anyway_\n  // to produce generally useful results and that will be covered already\n  let numericFunctions = [\"var\", \"calc\", \"min\", \"max\", \"clamp\"];\n  for (const fn of numericFunctions) {\n    if (value.includes(`${fn}(`)) {\n      return `calc(${value} * -1)`;\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","negateValue","test","replace","sign","numericFunctions","fn","includes"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/negateValue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return negateValue;\n    }\n});\nfunction negateValue(value) {\n    value = `${value}`;\n    if (value === \"0\") {\n        return \"0\";\n    }\n    // Flip sign of numbers\n    if (/^[+-]?(\\d+|\\d*\\.\\d+)(e[+-]?\\d+)?(%|\\w+)?$/.test(value)) {\n        return value.replace(/^[+-]?/, (sign)=>sign === \"-\" ? \"\" : \"-\");\n    }\n    // What functions we support negating numeric values for\n    // var() isn't inherently a numeric function but we support it anyway\n    // The trigonometric functions are omitted because you'll need to use calc(…) with them _anyway_\n    // to produce generally useful results and that will be covered already\n    let numericFunctions = [\n        \"var\",\n        \"calc\",\n        \"min\",\n        \"max\",\n        \"clamp\"\n    ];\n    for (const fn of numericFunctions){\n        if (value.includes(`${fn}(`)) {\n            return `calc(${value} * -1)`;\n        }\n    }\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,SAAS,EAAE;EACtCE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,WAAW;EACtB;AACJ,CAAC,CAAC;AACF,SAASA,WAAWA,CAACH,KAAK,EAAE;EACxBA,KAAK,GAAI,GAAEA,KAAM,EAAC;EAClB,IAAIA,KAAK,KAAK,GAAG,EAAE;IACf,OAAO,GAAG;EACd;EACA;EACA,IAAI,2CAA2C,CAACI,IAAI,CAACJ,KAAK,CAAC,EAAE;IACzD,OAAOA,KAAK,CAACK,OAAO,CAAC,QAAQ,EAAGC,IAAI,IAAGA,IAAI,KAAK,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACnE;EACA;EACA;EACA;EACA;EACA,IAAIC,gBAAgB,GAAG,CACnB,KAAK,EACL,MAAM,EACN,KAAK,EACL,KAAK,EACL,OAAO,CACV;EACD,KAAK,MAAMC,EAAE,IAAID,gBAAgB,EAAC;IAC9B,IAAIP,KAAK,CAACS,QAAQ,CAAE,GAAED,EAAG,GAAE,CAAC,EAAE;MAC1B,OAAQ,QAAOR,KAAM,QAAO;IAChC;EACJ;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}