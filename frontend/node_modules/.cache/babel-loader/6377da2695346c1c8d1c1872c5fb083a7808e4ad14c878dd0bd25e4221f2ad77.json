{"ast":null,"code":"import { IdentifierRole, isTopLevelDeclaration } from \"../parser/tokenizer\";\nimport Transformer from \"./Transformer\";\nexport default class ReactHotLoaderTransformer extends Transformer {\n  __init() {\n    this.extractedDefaultExportName = null;\n  }\n  constructor(tokens, filePath) {\n    super();\n    this.tokens = tokens;\n    this.filePath = filePath;\n    ReactHotLoaderTransformer.prototype.__init.call(this);\n    ;\n  }\n  setExtractedDefaultExportName(extractedDefaultExportName) {\n    this.extractedDefaultExportName = extractedDefaultExportName;\n  }\n  getPrefixCode() {\n    return `\n      (function () {\n        var enterModule = require('react-hot-loader').enterModule;\n        enterModule && enterModule(module);\n      })();`.replace(/\\s+/g, \" \").trim();\n  }\n  getSuffixCode() {\n    const topLevelNames = new Set();\n    for (const token of this.tokens.tokens) {\n      if (!token.isType && isTopLevelDeclaration(token) && token.identifierRole !== IdentifierRole.ImportDeclaration) {\n        topLevelNames.add(this.tokens.identifierNameForToken(token));\n      }\n    }\n    const namesToRegister = Array.from(topLevelNames).map(name => ({\n      variableName: name,\n      uniqueLocalName: name\n    }));\n    if (this.extractedDefaultExportName) {\n      namesToRegister.push({\n        variableName: this.extractedDefaultExportName,\n        uniqueLocalName: \"default\"\n      });\n    }\n    return `\n;(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n  var leaveModule = require('react-hot-loader').leaveModule;\n  if (!reactHotLoader) {\n    return;\n  }\n${namesToRegister.map(({\n      variableName,\n      uniqueLocalName\n    }) => `  reactHotLoader.register(${variableName}, \"${uniqueLocalName}\", ${JSON.stringify(this.filePath || \"\")});`).join(\"\\n\")}\n  leaveModule(module);\n})();`;\n  }\n  process() {\n    return false;\n  }\n}","map":{"version":3,"names":["IdentifierRole","isTopLevelDeclaration","Transformer","ReactHotLoaderTransformer","__init","extractedDefaultExportName","constructor","tokens","filePath","prototype","call","setExtractedDefaultExportName","getPrefixCode","replace","trim","getSuffixCode","topLevelNames","Set","token","isType","identifierRole","ImportDeclaration","add","identifierNameForToken","namesToRegister","Array","from","map","name","variableName","uniqueLocalName","push","JSON","stringify","join","process"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/sucrase/dist/esm/transformers/ReactHotLoaderTransformer.js"],"sourcesContent":["import {IdentifierRole, isTopLevelDeclaration} from \"../parser/tokenizer\";\n\nimport Transformer from \"./Transformer\";\n\nexport default class ReactHotLoaderTransformer extends Transformer {\n   __init() {this.extractedDefaultExportName = null}\n\n  constructor( tokens,  filePath) {\n    super();this.tokens = tokens;this.filePath = filePath;ReactHotLoaderTransformer.prototype.__init.call(this);;\n  }\n\n  setExtractedDefaultExportName(extractedDefaultExportName) {\n    this.extractedDefaultExportName = extractedDefaultExportName;\n  }\n\n  getPrefixCode() {\n    return `\n      (function () {\n        var enterModule = require('react-hot-loader').enterModule;\n        enterModule && enterModule(module);\n      })();`\n      .replace(/\\s+/g, \" \")\n      .trim();\n  }\n\n  getSuffixCode() {\n    const topLevelNames = new Set();\n    for (const token of this.tokens.tokens) {\n      if (\n        !token.isType &&\n        isTopLevelDeclaration(token) &&\n        token.identifierRole !== IdentifierRole.ImportDeclaration\n      ) {\n        topLevelNames.add(this.tokens.identifierNameForToken(token));\n      }\n    }\n    const namesToRegister = Array.from(topLevelNames).map((name) => ({\n      variableName: name,\n      uniqueLocalName: name,\n    }));\n    if (this.extractedDefaultExportName) {\n      namesToRegister.push({\n        variableName: this.extractedDefaultExportName,\n        uniqueLocalName: \"default\",\n      });\n    }\n    return `\n;(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n  var leaveModule = require('react-hot-loader').leaveModule;\n  if (!reactHotLoader) {\n    return;\n  }\n${namesToRegister\n  .map(\n    ({variableName, uniqueLocalName}) =>\n      `  reactHotLoader.register(${variableName}, \"${uniqueLocalName}\", ${JSON.stringify(\n        this.filePath || \"\",\n      )});`,\n  )\n  .join(\"\\n\")}\n  leaveModule(module);\n})();`;\n  }\n\n  process() {\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,qBAAqB,QAAO,qBAAqB;AAEzE,OAAOC,WAAW,MAAM,eAAe;AAEvC,eAAe,MAAMC,yBAAyB,SAASD,WAAW,CAAC;EAChEE,MAAMA,CAAA,EAAG;IAAC,IAAI,CAACC,0BAA0B,GAAG,IAAI;EAAA;EAEjDC,WAAWA,CAAEC,MAAM,EAAGC,QAAQ,EAAE;IAC9B,KAAK,CAAC,CAAC;IAAC,IAAI,CAACD,MAAM,GAAGA,MAAM;IAAC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IAACL,yBAAyB,CAACM,SAAS,CAACL,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC;IAAC;EAC9G;EAEAC,6BAA6BA,CAACN,0BAA0B,EAAE;IACxD,IAAI,CAACA,0BAA0B,GAAGA,0BAA0B;EAC9D;EAEAO,aAAaA,CAAA,EAAG;IACd,OAAQ;AACZ;AACA;AACA;AACA,YAAY,CACLC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBC,IAAI,CAAC,CAAC;EACX;EAEAC,aAAaA,CAAA,EAAG;IACd,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC/B,KAAK,MAAMC,KAAK,IAAI,IAAI,CAACX,MAAM,CAACA,MAAM,EAAE;MACtC,IACE,CAACW,KAAK,CAACC,MAAM,IACblB,qBAAqB,CAACiB,KAAK,CAAC,IAC5BA,KAAK,CAACE,cAAc,KAAKpB,cAAc,CAACqB,iBAAiB,EACzD;QACAL,aAAa,CAACM,GAAG,CAAC,IAAI,CAACf,MAAM,CAACgB,sBAAsB,CAACL,KAAK,CAAC,CAAC;MAC9D;IACF;IACA,MAAMM,eAAe,GAAGC,KAAK,CAACC,IAAI,CAACV,aAAa,CAAC,CAACW,GAAG,CAAEC,IAAI,KAAM;MAC/DC,YAAY,EAAED,IAAI;MAClBE,eAAe,EAAEF;IACnB,CAAC,CAAC,CAAC;IACH,IAAI,IAAI,CAACvB,0BAA0B,EAAE;MACnCmB,eAAe,CAACO,IAAI,CAAC;QACnBF,YAAY,EAAE,IAAI,CAACxB,0BAA0B;QAC7CyB,eAAe,EAAE;MACnB,CAAC,CAAC;IACJ;IACA,OAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,EAAEN,eAAe,CACdG,GAAG,CACF,CAAC;MAACE,YAAY;MAAEC;IAAe,CAAC,KAC7B,6BAA4BD,YAAa,MAAKC,eAAgB,MAAKE,IAAI,CAACC,SAAS,CAChF,IAAI,CAACzB,QAAQ,IAAI,EACnB,CAAE,IACN,CAAC,CACA0B,IAAI,CAAC,IAAI,CAAE;AACd;AACA,MAAM;EACJ;EAEAC,OAAOA,CAAA,EAAG;IACR,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}