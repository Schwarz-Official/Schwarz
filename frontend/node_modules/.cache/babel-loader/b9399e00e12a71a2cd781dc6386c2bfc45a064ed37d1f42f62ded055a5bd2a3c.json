{"ast":null,"code":"'use strict';\n\nconst util = require('util');\nconst braces = require('braces');\nconst picomatch = require('picomatch');\nconst utils = require('picomatch/lib/utils');\nconst isEmptyString = val => val === '' || val === './';\n\n/**\n * Returns an array of strings that match one or more glob patterns.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm(list, patterns[, options]);\n *\n * console.log(mm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {String|Array<string>} `list` List of strings to match.\n * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options)\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\nconst micromatch = (list, patterns, options) => {\n  patterns = [].concat(patterns);\n  list = [].concat(list);\n  let omit = new Set();\n  let keep = new Set();\n  let items = new Set();\n  let negatives = 0;\n  let onResult = state => {\n    items.add(state.output);\n    if (options && options.onResult) {\n      options.onResult(state);\n    }\n  };\n  for (let i = 0; i < patterns.length; i++) {\n    let isMatch = picomatch(String(patterns[i]), {\n      ...options,\n      onResult\n    }, true);\n    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;\n    if (negated) negatives++;\n    for (let item of list) {\n      let matched = isMatch(item, true);\n      let match = negated ? !matched.isMatch : matched.isMatch;\n      if (!match) continue;\n      if (negated) {\n        omit.add(matched.output);\n      } else {\n        omit.delete(matched.output);\n        keep.add(matched.output);\n      }\n    }\n  }\n  let result = negatives === patterns.length ? [...items] : [...keep];\n  let matches = result.filter(item => !omit.has(item));\n  if (options && matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error(`No matches found for \"${patterns.join(', ')}\"`);\n    }\n    if (options.nonull === true || options.nullglob === true) {\n      return options.unescape ? patterns.map(p => p.replace(/\\\\/g, '')) : patterns;\n    }\n  }\n  return matches;\n};\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.match = micromatch;\n\n/**\n * Returns a matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matcher(pattern[, options]);\n *\n * const isMatch = mm.matcher('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options`\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\nmicromatch.matcher = (pattern, options) => picomatch(pattern, options);\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.isMatch(string, patterns[, options]);\n *\n * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(mm.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `[options]` See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.any = micromatch.isMatch;\n\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.not(list, patterns[, options]);\n *\n * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\nmicromatch.not = (list, patterns, options = {}) => {\n  patterns = [].concat(patterns).map(String);\n  let result = new Set();\n  let items = [];\n  let onResult = state => {\n    if (options.onResult) options.onResult(state);\n    items.push(state.output);\n  };\n  let matches = new Set(micromatch(list, patterns, {\n    ...options,\n    onResult\n  }));\n  for (let item of items) {\n    if (!matches.has(item)) {\n      result.add(item);\n    }\n  }\n  return [...result];\n};\n\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var mm = require('micromatch');\n * // mm.contains(string, pattern[, options]);\n *\n * console.log(mm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(mm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any of the patterns matches any part of `str`.\n * @api public\n */\n\nmicromatch.contains = (str, pattern, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n  if (Array.isArray(pattern)) {\n    return pattern.some(p => micromatch.contains(str, p, options));\n  }\n  if (typeof pattern === 'string') {\n    if (isEmptyString(str) || isEmptyString(pattern)) {\n      return false;\n    }\n    if (str.includes(pattern) || str.startsWith('./') && str.slice(2).includes(pattern)) {\n      return true;\n    }\n  }\n  return micromatch.isMatch(str, pattern, {\n    ...options,\n    contains: true\n  });\n};\n\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matchKeys(object, patterns[, options]);\n *\n * const obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(mm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\nmicromatch.matchKeys = (obj, patterns, options) => {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('Expected the first argument to be an object');\n  }\n  let keys = micromatch(Object.keys(obj), patterns, options);\n  let res = {};\n  for (let key of keys) res[key] = obj[key];\n  return res;\n};\n\n/**\n * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.some(list, patterns[, options]);\n *\n * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`\n * @api public\n */\n\nmicromatch.some = (list, patterns, options) => {\n  let items = [].concat(list);\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (items.some(item => isMatch(item))) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if every string in the given `list` matches\n * any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.every(list, patterns[, options]);\n *\n * console.log(mm.every('foo.js', ['foo.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`\n * @api public\n */\n\nmicromatch.every = (list, patterns, options) => {\n  let items = [].concat(list);\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (!items.every(item => isMatch(item))) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if **all** of the given `patterns` match\n * the specified string.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.all(string, patterns[, options]);\n *\n * console.log(mm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(mm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.all = (str, patterns, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n  return [].concat(patterns).every(p => picomatch(p, options)(str));\n};\n\n/**\n * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.capture(pattern, string[, options]);\n *\n * console.log(mm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(mm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `glob` Glob pattern to use for matching.\n * @param {String} `input` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.\n * @api public\n */\n\nmicromatch.capture = (glob, input, options) => {\n  let posix = utils.isWindows(options);\n  let regex = picomatch.makeRe(String(glob), {\n    ...options,\n    capture: true\n  });\n  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);\n  if (match) {\n    return match.slice(1).map(v => v === void 0 ? '' : v);\n  }\n};\n\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.makeRe(pattern[, options]);\n *\n * console.log(mm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\nmicromatch.makeRe = (...args) => picomatch.makeRe(...args);\n\n/**\n * Scan a glob pattern to separate the pattern into segments. Used\n * by the [split](#split) method.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.scan(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\nmicromatch.scan = (...args) => picomatch.scan(...args);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.parse(pattern[, options]);\n * ```\n * @param {String} `glob`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as regex source string.\n * @api public\n */\n\nmicromatch.parse = (patterns, options) => {\n  let res = [];\n  for (let pattern of [].concat(patterns || [])) {\n    for (let str of braces(String(pattern), options)) {\n      res.push(picomatch.parse(str, options));\n    }\n  }\n  return res;\n};\n\n/**\n * Process the given brace `pattern`.\n *\n * ```js\n * const { braces } = require('micromatch');\n * console.log(braces('foo/{a,b,c}/bar'));\n * //=> [ 'foo/(a|b|c)/bar' ]\n *\n * console.log(braces('foo/{a,b,c}/bar', { expand: true }));\n * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n * ```\n * @param {String} `pattern` String with brace pattern to process.\n * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.\n * @return {Array}\n * @api public\n */\n\nmicromatch.braces = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  if (options && options.nobrace === true || !/\\{.*\\}/.test(pattern)) {\n    return [pattern];\n  }\n  return braces(pattern, options);\n};\n\n/**\n * Expand braces\n */\n\nmicromatch.braceExpand = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  return micromatch.braces(pattern, {\n    ...options,\n    expand: true\n  });\n};\n\n/**\n * Expose micromatch\n */\n\nmodule.exports = micromatch;","map":{"version":3,"names":["util","require","braces","picomatch","utils","isEmptyString","val","micromatch","list","patterns","options","concat","omit","Set","keep","items","negatives","onResult","state","add","output","i","length","isMatch","String","negated","negatedExtglob","item","matched","match","delete","result","matches","filter","has","failglob","Error","join","nonull","nullglob","unescape","map","p","replace","matcher","pattern","str","any","not","push","contains","TypeError","inspect","Array","isArray","some","includes","startsWith","slice","matchKeys","obj","isObject","keys","Object","res","key","every","all","capture","glob","input","posix","isWindows","regex","makeRe","exec","toPosixSlashes","v","args","scan","parse","nobrace","test","braceExpand","expand","module","exports"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/micromatch/index.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst braces = require('braces');\nconst picomatch = require('picomatch');\nconst utils = require('picomatch/lib/utils');\nconst isEmptyString = val => val === '' || val === './';\n\n/**\n * Returns an array of strings that match one or more glob patterns.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm(list, patterns[, options]);\n *\n * console.log(mm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {String|Array<string>} `list` List of strings to match.\n * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options)\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\nconst micromatch = (list, patterns, options) => {\n  patterns = [].concat(patterns);\n  list = [].concat(list);\n\n  let omit = new Set();\n  let keep = new Set();\n  let items = new Set();\n  let negatives = 0;\n\n  let onResult = state => {\n    items.add(state.output);\n    if (options && options.onResult) {\n      options.onResult(state);\n    }\n  };\n\n  for (let i = 0; i < patterns.length; i++) {\n    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);\n    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;\n    if (negated) negatives++;\n\n    for (let item of list) {\n      let matched = isMatch(item, true);\n\n      let match = negated ? !matched.isMatch : matched.isMatch;\n      if (!match) continue;\n\n      if (negated) {\n        omit.add(matched.output);\n      } else {\n        omit.delete(matched.output);\n        keep.add(matched.output);\n      }\n    }\n  }\n\n  let result = negatives === patterns.length ? [...items] : [...keep];\n  let matches = result.filter(item => !omit.has(item));\n\n  if (options && matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error(`No matches found for \"${patterns.join(', ')}\"`);\n    }\n\n    if (options.nonull === true || options.nullglob === true) {\n      return options.unescape ? patterns.map(p => p.replace(/\\\\/g, '')) : patterns;\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.match = micromatch;\n\n/**\n * Returns a matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matcher(pattern[, options]);\n *\n * const isMatch = mm.matcher('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options`\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\nmicromatch.matcher = (pattern, options) => picomatch(pattern, options);\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.isMatch(string, patterns[, options]);\n *\n * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(mm.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `[options]` See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.any = micromatch.isMatch;\n\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.not(list, patterns[, options]);\n *\n * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\nmicromatch.not = (list, patterns, options = {}) => {\n  patterns = [].concat(patterns).map(String);\n  let result = new Set();\n  let items = [];\n\n  let onResult = state => {\n    if (options.onResult) options.onResult(state);\n    items.push(state.output);\n  };\n\n  let matches = new Set(micromatch(list, patterns, { ...options, onResult }));\n\n  for (let item of items) {\n    if (!matches.has(item)) {\n      result.add(item);\n    }\n  }\n  return [...result];\n};\n\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var mm = require('micromatch');\n * // mm.contains(string, pattern[, options]);\n *\n * console.log(mm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(mm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any of the patterns matches any part of `str`.\n * @api public\n */\n\nmicromatch.contains = (str, pattern, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  if (Array.isArray(pattern)) {\n    return pattern.some(p => micromatch.contains(str, p, options));\n  }\n\n  if (typeof pattern === 'string') {\n    if (isEmptyString(str) || isEmptyString(pattern)) {\n      return false;\n    }\n\n    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {\n      return true;\n    }\n  }\n\n  return micromatch.isMatch(str, pattern, { ...options, contains: true });\n};\n\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matchKeys(object, patterns[, options]);\n *\n * const obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(mm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\nmicromatch.matchKeys = (obj, patterns, options) => {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('Expected the first argument to be an object');\n  }\n  let keys = micromatch(Object.keys(obj), patterns, options);\n  let res = {};\n  for (let key of keys) res[key] = obj[key];\n  return res;\n};\n\n/**\n * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.some(list, patterns[, options]);\n *\n * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`\n * @api public\n */\n\nmicromatch.some = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (items.some(item => isMatch(item))) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if every string in the given `list` matches\n * any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.every(list, patterns[, options]);\n *\n * console.log(mm.every('foo.js', ['foo.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`\n * @api public\n */\n\nmicromatch.every = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (!items.every(item => isMatch(item))) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if **all** of the given `patterns` match\n * the specified string.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.all(string, patterns[, options]);\n *\n * console.log(mm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(mm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.all = (str, patterns, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  return [].concat(patterns).every(p => picomatch(p, options)(str));\n};\n\n/**\n * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.capture(pattern, string[, options]);\n *\n * console.log(mm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(mm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `glob` Glob pattern to use for matching.\n * @param {String} `input` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.\n * @api public\n */\n\nmicromatch.capture = (glob, input, options) => {\n  let posix = utils.isWindows(options);\n  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });\n  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);\n\n  if (match) {\n    return match.slice(1).map(v => v === void 0 ? '' : v);\n  }\n};\n\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.makeRe(pattern[, options]);\n *\n * console.log(mm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\nmicromatch.makeRe = (...args) => picomatch.makeRe(...args);\n\n/**\n * Scan a glob pattern to separate the pattern into segments. Used\n * by the [split](#split) method.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.scan(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\nmicromatch.scan = (...args) => picomatch.scan(...args);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.parse(pattern[, options]);\n * ```\n * @param {String} `glob`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as regex source string.\n * @api public\n */\n\nmicromatch.parse = (patterns, options) => {\n  let res = [];\n  for (let pattern of [].concat(patterns || [])) {\n    for (let str of braces(String(pattern), options)) {\n      res.push(picomatch.parse(str, options));\n    }\n  }\n  return res;\n};\n\n/**\n * Process the given brace `pattern`.\n *\n * ```js\n * const { braces } = require('micromatch');\n * console.log(braces('foo/{a,b,c}/bar'));\n * //=> [ 'foo/(a|b|c)/bar' ]\n *\n * console.log(braces('foo/{a,b,c}/bar', { expand: true }));\n * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n * ```\n * @param {String} `pattern` String with brace pattern to process.\n * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.\n * @return {Array}\n * @api public\n */\n\nmicromatch.braces = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  if ((options && options.nobrace === true) || !/\\{.*\\}/.test(pattern)) {\n    return [pattern];\n  }\n  return braces(pattern, options);\n};\n\n/**\n * Expand braces\n */\n\nmicromatch.braceExpand = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  return micromatch.braces(pattern, { ...options, expand: true });\n};\n\n/**\n * Expose micromatch\n */\n\nmodule.exports = micromatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}