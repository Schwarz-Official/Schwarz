{"ast":null,"code":"'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar escaped = /\\\\([!*?|[\\](){}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({\n    flipBackslashes: true\n  }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (isEnclosure(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlobby(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\nfunction isEnclosure(str) {\n  var lastChar = str.slice(-1);\n  var enclosureStart;\n  switch (lastChar) {\n    case '}':\n      enclosureStart = '{';\n      break;\n    case ']':\n      enclosureStart = '[';\n      break;\n    default:\n      return false;\n  }\n  var foundIndex = str.indexOf(enclosureStart);\n  if (foundIndex < 0) {\n    return false;\n  }\n  return str.slice(foundIndex + 1, -1).includes(slash);\n}\nfunction isGlobby(str) {\n  if (/\\([^()]+$/.test(str)) {\n    return true;\n  }\n  if (str[0] === '{' || str[0] === '[') {\n    return true;\n  }\n  if (/[^\\\\][{[]/.test(str)) {\n    return true;\n  }\n  return isGlob(str);\n}","map":{"version":3,"names":["isGlob","require","pathPosixDirname","posix","dirname","isWin32","platform","slash","backslash","escaped","module","exports","globParent","str","opts","options","Object","assign","flipBackslashes","indexOf","replace","isEnclosure","isGlobby","lastChar","slice","enclosureStart","foundIndex","includes","test"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/glob-parent/index.js"],"sourcesContent":["'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\n\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar escaped = /\\\\([!*?|[\\](){}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({ flipBackslashes: true }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (isEnclosure(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlobby(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\n\nfunction isEnclosure(str) {\n  var lastChar = str.slice(-1);\n\n  var enclosureStart;\n  switch (lastChar) {\n    case '}':\n      enclosureStart = '{';\n      break;\n    case ']':\n      enclosureStart = '[';\n      break;\n    default:\n      return false;\n  }\n\n  var foundIndex = str.indexOf(enclosureStart);\n  if (foundIndex < 0) {\n    return false;\n  }\n\n  return str.slice(foundIndex + 1, -1).includes(slash);\n}\n\nfunction isGlobby(str) {\n  if (/\\([^()]+$/.test(str)) {\n    return true;\n  }\n  if (str[0] === '{' || str[0] === '[') {\n    return true;\n  }\n  if (/[^\\\\][{[]/.test(str)) {\n    return true;\n  }\n  return isGlob(str);\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,MAAM,CAAC,CAACE,KAAK,CAACC,OAAO;AACpD,IAAIC,OAAO,GAAGJ,OAAO,CAAC,IAAI,CAAC,CAACK,QAAQ,CAAC,CAAC,KAAK,OAAO;AAElD,IAAIC,KAAK,GAAG,GAAG;AACf,IAAIC,SAAS,GAAG,KAAK;AACrB,IAAIC,OAAO,GAAG,oBAAoB;;AAElC;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,UAAUA,CAACC,GAAG,EAAEC,IAAI,EAAE;EAC9C,IAAIC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC;IAAEC,eAAe,EAAE;EAAK,CAAC,EAAEJ,IAAI,CAAC;;EAE5D;EACA,IAAIC,OAAO,CAACG,eAAe,IAAIb,OAAO,IAAIQ,GAAG,CAACM,OAAO,CAACZ,KAAK,CAAC,GAAG,CAAC,EAAE;IAChEM,GAAG,GAAGA,GAAG,CAACO,OAAO,CAACZ,SAAS,EAAED,KAAK,CAAC;EACrC;;EAEA;EACA,IAAIc,WAAW,CAACR,GAAG,CAAC,EAAE;IACpBA,GAAG,IAAIN,KAAK;EACd;;EAEA;EACAM,GAAG,IAAI,GAAG;;EAEV;EACA,GAAG;IACDA,GAAG,GAAGX,gBAAgB,CAACW,GAAG,CAAC;EAC7B,CAAC,QAAQS,QAAQ,CAACT,GAAG,CAAC;;EAEtB;EACA,OAAOA,GAAG,CAACO,OAAO,CAACX,OAAO,EAAE,IAAI,CAAC;AACnC,CAAC;AAED,SAASY,WAAWA,CAACR,GAAG,EAAE;EACxB,IAAIU,QAAQ,GAAGV,GAAG,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;EAE5B,IAAIC,cAAc;EAClB,QAAQF,QAAQ;IACd,KAAK,GAAG;MACNE,cAAc,GAAG,GAAG;MACpB;IACF,KAAK,GAAG;MACNA,cAAc,GAAG,GAAG;MACpB;IACF;MACE,OAAO,KAAK;EAChB;EAEA,IAAIC,UAAU,GAAGb,GAAG,CAACM,OAAO,CAACM,cAAc,CAAC;EAC5C,IAAIC,UAAU,GAAG,CAAC,EAAE;IAClB,OAAO,KAAK;EACd;EAEA,OAAOb,GAAG,CAACW,KAAK,CAACE,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACpB,KAAK,CAAC;AACtD;AAEA,SAASe,QAAQA,CAACT,GAAG,EAAE;EACrB,IAAI,WAAW,CAACe,IAAI,CAACf,GAAG,CAAC,EAAE;IACzB,OAAO,IAAI;EACb;EACA,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACpC,OAAO,IAAI;EACb;EACA,IAAI,WAAW,CAACe,IAAI,CAACf,GAAG,CAAC,EAAE;IACzB,OAAO,IAAI;EACb;EACA,OAAOb,MAAM,CAACa,GAAG,CAAC;AACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}