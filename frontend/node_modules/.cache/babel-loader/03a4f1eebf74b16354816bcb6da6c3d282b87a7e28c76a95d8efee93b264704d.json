{"ast":null,"code":"import { isTopLevelDeclaration } from \"../parser/tokenizer\";\nimport { TokenType as tt } from \"../parser/tokenizer/types\";\nexport const EMPTY_DECLARATION_INFO = {\n  typeDeclarations: new Set(),\n  valueDeclarations: new Set()\n};\n\n/**\n * Get all top-level identifiers that should be preserved when exported in TypeScript.\n *\n * Examples:\n * - If an identifier is declared as `const x`, then `export {x}` should be preserved.\n * - If it's declared as `type x`, then `export {x}` should be removed.\n * - If it's declared as both `const x` and `type x`, then the export should be preserved.\n * - Classes and enums should be preserved (even though they also introduce types).\n * - Imported identifiers should be preserved since we don't have enough information to\n *   rule them out. --isolatedModules disallows re-exports, which catches errors here.\n */\nexport default function getDeclarationInfo(tokens) {\n  const typeDeclarations = new Set();\n  const valueDeclarations = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (token.type === tt.name && isTopLevelDeclaration(token)) {\n      if (token.isType) {\n        typeDeclarations.add(tokens.identifierNameForToken(token));\n      } else {\n        valueDeclarations.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return {\n    typeDeclarations,\n    valueDeclarations\n  };\n}","map":{"version":3,"names":["isTopLevelDeclaration","TokenType","tt","EMPTY_DECLARATION_INFO","typeDeclarations","Set","valueDeclarations","getDeclarationInfo","tokens","i","length","token","type","name","isType","add","identifierNameForToken"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/sucrase/dist/esm/util/getDeclarationInfo.js"],"sourcesContent":["import {isTopLevelDeclaration} from \"../parser/tokenizer\";\nimport {TokenType as tt} from \"../parser/tokenizer/types\";\n\n\n\n\n\n\n\nexport const EMPTY_DECLARATION_INFO = {\n  typeDeclarations: new Set(),\n  valueDeclarations: new Set(),\n};\n\n/**\n * Get all top-level identifiers that should be preserved when exported in TypeScript.\n *\n * Examples:\n * - If an identifier is declared as `const x`, then `export {x}` should be preserved.\n * - If it's declared as `type x`, then `export {x}` should be removed.\n * - If it's declared as both `const x` and `type x`, then the export should be preserved.\n * - Classes and enums should be preserved (even though they also introduce types).\n * - Imported identifiers should be preserved since we don't have enough information to\n *   rule them out. --isolatedModules disallows re-exports, which catches errors here.\n */\nexport default function getDeclarationInfo(tokens) {\n  const typeDeclarations = new Set();\n  const valueDeclarations = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (token.type === tt.name && isTopLevelDeclaration(token)) {\n      if (token.isType) {\n        typeDeclarations.add(tokens.identifierNameForToken(token));\n      } else {\n        valueDeclarations.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return {typeDeclarations, valueDeclarations};\n}\n"],"mappings":"AAAA,SAAQA,qBAAqB,QAAO,qBAAqB;AACzD,SAAQC,SAAS,IAAIC,EAAE,QAAO,2BAA2B;AAQzD,OAAO,MAAMC,sBAAsB,GAAG;EACpCC,gBAAgB,EAAE,IAAIC,GAAG,CAAC,CAAC;EAC3BC,iBAAiB,EAAE,IAAID,GAAG,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASE,kBAAkBA,CAACC,MAAM,EAAE;EACjD,MAAMJ,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;EAClC,MAAMC,iBAAiB,GAAG,IAAID,GAAG,CAAC,CAAC;EACnC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACA,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAC7C,MAAME,KAAK,GAAGH,MAAM,CAACA,MAAM,CAACC,CAAC,CAAC;IAC9B,IAAIE,KAAK,CAACC,IAAI,KAAKV,EAAE,CAACW,IAAI,IAAIb,qBAAqB,CAACW,KAAK,CAAC,EAAE;MAC1D,IAAIA,KAAK,CAACG,MAAM,EAAE;QAChBV,gBAAgB,CAACW,GAAG,CAACP,MAAM,CAACQ,sBAAsB,CAACL,KAAK,CAAC,CAAC;MAC5D,CAAC,MAAM;QACLL,iBAAiB,CAACS,GAAG,CAACP,MAAM,CAACQ,sBAAsB,CAACL,KAAK,CAAC,CAAC;MAC7D;IACF;EACF;EACA,OAAO;IAACP,gBAAgB;IAAEE;EAAiB,CAAC;AAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}