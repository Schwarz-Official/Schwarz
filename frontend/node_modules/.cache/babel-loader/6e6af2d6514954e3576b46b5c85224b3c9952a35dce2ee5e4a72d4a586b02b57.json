{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return getModuleDependencies;\n  }\n});\nconst _fs = /*#__PURE__*/_interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nlet jsExtensions = [\".js\", \".cjs\", \".mjs\"];\n// Given the current file `a.ts`, we want to make sure that when importing `b` that we resolve\n// `b.ts` before `b.js`\n//\n// E.g.:\n//\n// a.ts\n//   b // .ts\n//   c // .ts\n// a.js\n//   b // .js or .ts\nlet jsResolutionOrder = [\"\", \".js\", \".cjs\", \".mjs\", \".ts\", \".cts\", \".mts\", \".jsx\", \".tsx\"];\nlet tsResolutionOrder = [\"\", \".ts\", \".cts\", \".mts\", \".tsx\", \".js\", \".cjs\", \".mjs\", \".jsx\"];\nfunction resolveWithExtension(file, extensions) {\n  // Try to find `./a.ts`, `./a.ts`, ... from `./a`\n  for (let ext of extensions) {\n    let full = `${file}${ext}`;\n    if (_fs.default.existsSync(full) && _fs.default.statSync(full).isFile()) {\n      return full;\n    }\n  }\n  // Try to find `./a/index.js` from `./a`\n  for (let ext of extensions) {\n    let full = `${file}/index${ext}`;\n    if (_fs.default.existsSync(full)) {\n      return full;\n    }\n  }\n  return null;\n}\nfunction* _getModuleDependencies(filename, base, seen, ext = _path.default.extname(filename)) {\n  // Try to find the file\n  let absoluteFile = resolveWithExtension(_path.default.resolve(base, filename), jsExtensions.includes(ext) ? jsResolutionOrder : tsResolutionOrder);\n  if (absoluteFile === null) return; // File doesn't exist\n  // Prevent infinite loops when there are circular dependencies\n  if (seen.has(absoluteFile)) return; // Already seen\n  seen.add(absoluteFile);\n  // Mark the file as a dependency\n  yield absoluteFile;\n  // Resolve new base for new imports/requires\n  base = _path.default.dirname(absoluteFile);\n  ext = _path.default.extname(absoluteFile);\n  let contents = _fs.default.readFileSync(absoluteFile, \"utf-8\");\n  // Find imports/requires\n  for (let match of [...contents.matchAll(/import[\\s\\S]*?['\"](.{3,}?)['\"]/gi), ...contents.matchAll(/import[\\s\\S]*from[\\s\\S]*?['\"](.{3,}?)['\"]/gi), ...contents.matchAll(/require\\(['\"`](.+)['\"`]\\)/gi)]) {\n    // Bail out if it's not a relative file\n    if (!match[1].startsWith(\".\")) continue;\n    yield* _getModuleDependencies(match[1], base, seen, ext);\n  }\n}\nfunction getModuleDependencies(absoluteFilePath) {\n  if (absoluteFilePath === null) return new Set();\n  return new Set(_getModuleDependencies(absoluteFilePath, _path.default.dirname(absoluteFilePath), new Set()));\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","getModuleDependencies","_fs","_interop_require_default","require","_path","obj","__esModule","default","jsExtensions","jsResolutionOrder","tsResolutionOrder","resolveWithExtension","file","extensions","ext","full","existsSync","statSync","isFile","_getModuleDependencies","filename","base","seen","extname","absoluteFile","resolve","includes","has","add","dirname","contents","readFileSync","match","matchAll","startsWith","absoluteFilePath","Set"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/lib/getModuleDependencies.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return getModuleDependencies;\n    }\n});\nconst _fs = /*#__PURE__*/ _interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet jsExtensions = [\n    \".js\",\n    \".cjs\",\n    \".mjs\"\n];\n// Given the current file `a.ts`, we want to make sure that when importing `b` that we resolve\n// `b.ts` before `b.js`\n//\n// E.g.:\n//\n// a.ts\n//   b // .ts\n//   c // .ts\n// a.js\n//   b // .js or .ts\nlet jsResolutionOrder = [\n    \"\",\n    \".js\",\n    \".cjs\",\n    \".mjs\",\n    \".ts\",\n    \".cts\",\n    \".mts\",\n    \".jsx\",\n    \".tsx\"\n];\nlet tsResolutionOrder = [\n    \"\",\n    \".ts\",\n    \".cts\",\n    \".mts\",\n    \".tsx\",\n    \".js\",\n    \".cjs\",\n    \".mjs\",\n    \".jsx\"\n];\nfunction resolveWithExtension(file, extensions) {\n    // Try to find `./a.ts`, `./a.ts`, ... from `./a`\n    for (let ext of extensions){\n        let full = `${file}${ext}`;\n        if (_fs.default.existsSync(full) && _fs.default.statSync(full).isFile()) {\n            return full;\n        }\n    }\n    // Try to find `./a/index.js` from `./a`\n    for (let ext of extensions){\n        let full = `${file}/index${ext}`;\n        if (_fs.default.existsSync(full)) {\n            return full;\n        }\n    }\n    return null;\n}\nfunction* _getModuleDependencies(filename, base, seen, ext = _path.default.extname(filename)) {\n    // Try to find the file\n    let absoluteFile = resolveWithExtension(_path.default.resolve(base, filename), jsExtensions.includes(ext) ? jsResolutionOrder : tsResolutionOrder);\n    if (absoluteFile === null) return; // File doesn't exist\n    // Prevent infinite loops when there are circular dependencies\n    if (seen.has(absoluteFile)) return; // Already seen\n    seen.add(absoluteFile);\n    // Mark the file as a dependency\n    yield absoluteFile;\n    // Resolve new base for new imports/requires\n    base = _path.default.dirname(absoluteFile);\n    ext = _path.default.extname(absoluteFile);\n    let contents = _fs.default.readFileSync(absoluteFile, \"utf-8\");\n    // Find imports/requires\n    for (let match of [\n        ...contents.matchAll(/import[\\s\\S]*?['\"](.{3,}?)['\"]/gi),\n        ...contents.matchAll(/import[\\s\\S]*from[\\s\\S]*?['\"](.{3,}?)['\"]/gi),\n        ...contents.matchAll(/require\\(['\"`](.+)['\"`]\\)/gi)\n    ]){\n        // Bail out if it's not a relative file\n        if (!match[1].startsWith(\".\")) continue;\n        yield* _getModuleDependencies(match[1], base, seen, ext);\n    }\n}\nfunction getModuleDependencies(absoluteFilePath) {\n    if (absoluteFilePath === null) return new Set();\n    return new Set(_getModuleDependencies(absoluteFilePath, _path.default.dirname(absoluteFilePath), new Set()));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}