{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  parseBoxShadowValue: function () {\n    return parseBoxShadowValue;\n  },\n  formatBoxShadowValue: function () {\n    return formatBoxShadowValue;\n  }\n});\nconst _splitAtTopLevelOnly = require(\"./splitAtTopLevelOnly\");\nlet KEYWORDS = new Set([\"inset\", \"inherit\", \"initial\", \"revert\", \"unset\"]);\nlet SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\n\nlet LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g;\nfunction parseBoxShadowValue(input) {\n  let shadows = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(input, \",\");\n  return shadows.map(shadow => {\n    let value = shadow.trim();\n    let result = {\n      raw: value\n    };\n    let parts = value.split(SPACE);\n    let seen = new Set();\n    for (let part of parts) {\n      // Reset index, since the regex is stateful.\n      LENGTH.lastIndex = 0;\n      // Keyword\n      if (!seen.has(\"KEYWORD\") && KEYWORDS.has(part)) {\n        result.keyword = part;\n        seen.add(\"KEYWORD\");\n      } else if (LENGTH.test(part)) {\n        if (!seen.has(\"X\")) {\n          result.x = part;\n          seen.add(\"X\");\n        } else if (!seen.has(\"Y\")) {\n          result.y = part;\n          seen.add(\"Y\");\n        } else if (!seen.has(\"BLUR\")) {\n          result.blur = part;\n          seen.add(\"BLUR\");\n        } else if (!seen.has(\"SPREAD\")) {\n          result.spread = part;\n          seen.add(\"SPREAD\");\n        }\n      } else {\n        if (!result.color) {\n          result.color = part;\n        } else {\n          if (!result.unknown) result.unknown = [];\n          result.unknown.push(part);\n        }\n      }\n    }\n    // Check if valid\n    result.valid = result.x !== undefined && result.y !== undefined;\n    return result;\n  });\n}\nfunction formatBoxShadowValue(shadows) {\n  return shadows.map(shadow => {\n    if (!shadow.valid) {\n      return shadow.raw;\n    }\n    return [shadow.keyword, shadow.x, shadow.y, shadow.blur, shadow.spread, shadow.color].filter(Boolean).join(\" \");\n  }).join(\", \");\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","parseBoxShadowValue","formatBoxShadowValue","_splitAtTopLevelOnly","require","KEYWORDS","Set","SPACE","LENGTH","input","shadows","splitAtTopLevelOnly","map","shadow","trim","result","raw","parts","split","seen","part","lastIndex","has","keyword","add","test","x","y","blur","spread","color","unknown","push","valid","undefined","filter","Boolean","join"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/parseBoxShadowValue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    parseBoxShadowValue: function() {\n        return parseBoxShadowValue;\n    },\n    formatBoxShadowValue: function() {\n        return formatBoxShadowValue;\n    }\n});\nconst _splitAtTopLevelOnly = require(\"./splitAtTopLevelOnly\");\nlet KEYWORDS = new Set([\n    \"inset\",\n    \"inherit\",\n    \"initial\",\n    \"revert\",\n    \"unset\"\n]);\nlet SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\nlet LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g;\nfunction parseBoxShadowValue(input) {\n    let shadows = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(input, \",\");\n    return shadows.map((shadow)=>{\n        let value = shadow.trim();\n        let result = {\n            raw: value\n        };\n        let parts = value.split(SPACE);\n        let seen = new Set();\n        for (let part of parts){\n            // Reset index, since the regex is stateful.\n            LENGTH.lastIndex = 0;\n            // Keyword\n            if (!seen.has(\"KEYWORD\") && KEYWORDS.has(part)) {\n                result.keyword = part;\n                seen.add(\"KEYWORD\");\n            } else if (LENGTH.test(part)) {\n                if (!seen.has(\"X\")) {\n                    result.x = part;\n                    seen.add(\"X\");\n                } else if (!seen.has(\"Y\")) {\n                    result.y = part;\n                    seen.add(\"Y\");\n                } else if (!seen.has(\"BLUR\")) {\n                    result.blur = part;\n                    seen.add(\"BLUR\");\n                } else if (!seen.has(\"SPREAD\")) {\n                    result.spread = part;\n                    seen.add(\"SPREAD\");\n                }\n            } else {\n                if (!result.color) {\n                    result.color = part;\n                } else {\n                    if (!result.unknown) result.unknown = [];\n                    result.unknown.push(part);\n                }\n            }\n        }\n        // Check if valid\n        result.valid = result.x !== undefined && result.y !== undefined;\n        return result;\n    });\n}\nfunction formatBoxShadowValue(shadows) {\n    return shadows.map((shadow)=>{\n        if (!shadow.valid) {\n            return shadow.raw;\n        }\n        return [\n            shadow.keyword,\n            shadow.x,\n            shadow.y,\n            shadow.blur,\n            shadow.spread,\n            shadow.color\n        ].filter(Boolean).join(\" \");\n    }).join(\", \");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}