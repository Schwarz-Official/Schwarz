{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"applyImportantSelector\", {\n  enumerable: true,\n  get: function () {\n    return applyImportantSelector;\n  }\n});\nconst _postcssselectorparser = /*#__PURE__*/_interop_require_default(require(\"postcss-selector-parser\"));\nconst _pseudoElements = require(\"./pseudoElements\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction applyImportantSelector(selector, important) {\n  let sel = (0, _postcssselectorparser.default)().astSync(selector);\n  sel.each(sel => {\n    // Wrap with :is if it's not already wrapped\n    let isWrapped = sel.nodes[0].type === \"pseudo\" && sel.nodes[0].value === \":is\" && sel.nodes.every(node => node.type !== \"combinator\");\n    if (!isWrapped) {\n      sel.nodes = [_postcssselectorparser.default.pseudo({\n        value: \":is\",\n        nodes: [sel.clone()]\n      })];\n    }\n    (0, _pseudoElements.movePseudos)(sel);\n  });\n  return `${important} ${sel.toString()}`;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","applyImportantSelector","_postcssselectorparser","_interop_require_default","require","_pseudoElements","obj","__esModule","default","selector","important","sel","astSync","each","isWrapped","nodes","type","every","node","pseudo","clone","movePseudos","toString"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/applyImportantSelector.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"applyImportantSelector\", {\n    enumerable: true,\n    get: function() {\n        return applyImportantSelector;\n    }\n});\nconst _postcssselectorparser = /*#__PURE__*/ _interop_require_default(require(\"postcss-selector-parser\"));\nconst _pseudoElements = require(\"./pseudoElements\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction applyImportantSelector(selector, important) {\n    let sel = (0, _postcssselectorparser.default)().astSync(selector);\n    sel.each((sel)=>{\n        // Wrap with :is if it's not already wrapped\n        let isWrapped = sel.nodes[0].type === \"pseudo\" && sel.nodes[0].value === \":is\" && sel.nodes.every((node)=>node.type !== \"combinator\");\n        if (!isWrapped) {\n            sel.nodes = [\n                _postcssselectorparser.default.pseudo({\n                    value: \":is\",\n                    nodes: [\n                        sel.clone()\n                    ]\n                })\n            ];\n        }\n        (0, _pseudoElements.movePseudos)(sel);\n    });\n    return `${important} ${sel.toString()}`;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,wBAAwB,EAAE;EACrDE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,sBAAsB;EACjC;AACJ,CAAC,CAAC;AACF,MAAMC,sBAAsB,GAAG,aAAcC,wBAAwB,CAACC,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACzG,MAAMC,eAAe,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACnD,SAASD,wBAAwBA,CAACG,GAAG,EAAE;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IACjCE,OAAO,EAAEF;EACb,CAAC;AACL;AACA,SAASL,sBAAsBA,CAACQ,QAAQ,EAAEC,SAAS,EAAE;EACjD,IAAIC,GAAG,GAAG,CAAC,CAAC,EAAET,sBAAsB,CAACM,OAAO,EAAE,CAAC,CAACI,OAAO,CAACH,QAAQ,CAAC;EACjEE,GAAG,CAACE,IAAI,CAAEF,GAAG,IAAG;IACZ;IACA,IAAIG,SAAS,GAAGH,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,KAAK,QAAQ,IAAIL,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC,CAACjB,KAAK,KAAK,KAAK,IAAIa,GAAG,CAACI,KAAK,CAACE,KAAK,CAAEC,IAAI,IAAGA,IAAI,CAACF,IAAI,KAAK,YAAY,CAAC;IACrI,IAAI,CAACF,SAAS,EAAE;MACZH,GAAG,CAACI,KAAK,GAAG,CACRb,sBAAsB,CAACM,OAAO,CAACW,MAAM,CAAC;QAClCrB,KAAK,EAAE,KAAK;QACZiB,KAAK,EAAE,CACHJ,GAAG,CAACS,KAAK,CAAC,CAAC;MAEnB,CAAC,CAAC,CACL;IACL;IACA,CAAC,CAAC,EAAEf,eAAe,CAACgB,WAAW,EAAEV,GAAG,CAAC;EACzC,CAAC,CAAC;EACF,OAAQ,GAAED,SAAU,IAAGC,GAAG,CAACW,QAAQ,CAAC,CAAE,EAAC;AAC3C"},"metadata":{},"sourceType":"script","externalDependencies":[]}