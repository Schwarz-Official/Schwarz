{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    return readdirWithFileTypes(directory, settings);\n  }\n  return readdir(directory, settings);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings) {\n  const dirents = settings.fs.readdirSync(directory, {\n    withFileTypes: true\n  });\n  return dirents.map(dirent => {\n    const entry = {\n      dirent,\n      name: dirent.name,\n      path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n    };\n    if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n      try {\n        const stats = settings.fs.statSync(entry.path);\n        entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      } catch (error) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          throw error;\n        }\n      }\n    }\n    return entry;\n  });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction readdir(directory, settings) {\n  const names = settings.fs.readdirSync(directory);\n  return names.map(name => {\n    const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n    const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n    const entry = {\n      name,\n      path: entryPath,\n      dirent: utils.fs.createDirentFromStats(name, stats)\n    };\n    if (settings.stats) {\n      entry.stats = stats;\n    }\n    return entry;\n  });\n}\nexports.readdir = readdir;","map":{"version":3,"names":["Object","defineProperty","exports","value","readdir","readdirWithFileTypes","read","fsStat","require","constants_1","utils","common","directory","settings","stats","IS_SUPPORT_READDIR_WITH_FILE_TYPES","dirents","fs","readdirSync","withFileTypes","map","dirent","entry","name","path","joinPathSegments","pathSegmentSeparator","isSymbolicLink","followSymbolicLinks","statSync","createDirentFromStats","error","throwErrorOnBrokenSymbolicLink","names","entryPath","fsStatSettings"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/@nodelib/fs.scandir/out/providers/sync.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        return readdirWithFileTypes(directory, settings);\n    }\n    return readdir(directory, settings);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings) {\n    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });\n    return dirents.map((dirent) => {\n        const entry = {\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        };\n        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n            try {\n                const stats = settings.fs.statSync(entry.path);\n                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            }\n            catch (error) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    throw error;\n                }\n            }\n        }\n        return entry;\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction readdir(directory, settings) {\n    const names = settings.fs.readdirSync(directory);\n    return names.map((name) => {\n        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n        const entry = {\n            name,\n            path: entryPath,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n        };\n        if (settings.stats) {\n            entry.stats = stats;\n        }\n        return entry;\n    });\n}\nexports.readdir = readdir;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACG,oBAAoB,GAAGH,OAAO,CAACI,IAAI,GAAG,KAAK,CAAC;AACtE,MAAMC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAU,CAAC;AACjC,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,SAASF,IAAIA,CAACM,SAAS,EAAEC,QAAQ,EAAE;EAC/B,IAAI,CAACA,QAAQ,CAACC,KAAK,IAAIL,WAAW,CAACM,kCAAkC,EAAE;IACnE,OAAOV,oBAAoB,CAACO,SAAS,EAAEC,QAAQ,CAAC;EACpD;EACA,OAAOT,OAAO,CAACQ,SAAS,EAAEC,QAAQ,CAAC;AACvC;AACAX,OAAO,CAACI,IAAI,GAAGA,IAAI;AACnB,SAASD,oBAAoBA,CAACO,SAAS,EAAEC,QAAQ,EAAE;EAC/C,MAAMG,OAAO,GAAGH,QAAQ,CAACI,EAAE,CAACC,WAAW,CAACN,SAAS,EAAE;IAAEO,aAAa,EAAE;EAAK,CAAC,CAAC;EAC3E,OAAOH,OAAO,CAACI,GAAG,CAAEC,MAAM,IAAK;IAC3B,MAAMC,KAAK,GAAG;MACVD,MAAM;MACNE,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,IAAI,EAAEb,MAAM,CAACc,gBAAgB,CAACb,SAAS,EAAES,MAAM,CAACE,IAAI,EAAEV,QAAQ,CAACa,oBAAoB;IACvF,CAAC;IACD,IAAIJ,KAAK,CAACD,MAAM,CAACM,cAAc,CAAC,CAAC,IAAId,QAAQ,CAACe,mBAAmB,EAAE;MAC/D,IAAI;QACA,MAAMd,KAAK,GAAGD,QAAQ,CAACI,EAAE,CAACY,QAAQ,CAACP,KAAK,CAACE,IAAI,CAAC;QAC9CF,KAAK,CAACD,MAAM,GAAGX,KAAK,CAACO,EAAE,CAACa,qBAAqB,CAACR,KAAK,CAACC,IAAI,EAAET,KAAK,CAAC;MACpE,CAAC,CACD,OAAOiB,KAAK,EAAE;QACV,IAAIlB,QAAQ,CAACmB,8BAA8B,EAAE;UACzC,MAAMD,KAAK;QACf;MACJ;IACJ;IACA,OAAOT,KAAK;EAChB,CAAC,CAAC;AACN;AACApB,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB;AACnD,SAASD,OAAOA,CAACQ,SAAS,EAAEC,QAAQ,EAAE;EAClC,MAAMoB,KAAK,GAAGpB,QAAQ,CAACI,EAAE,CAACC,WAAW,CAACN,SAAS,CAAC;EAChD,OAAOqB,KAAK,CAACb,GAAG,CAAEG,IAAI,IAAK;IACvB,MAAMW,SAAS,GAAGvB,MAAM,CAACc,gBAAgB,CAACb,SAAS,EAAEW,IAAI,EAAEV,QAAQ,CAACa,oBAAoB,CAAC;IACzF,MAAMZ,KAAK,GAAGP,MAAM,CAACsB,QAAQ,CAACK,SAAS,EAAErB,QAAQ,CAACsB,cAAc,CAAC;IACjE,MAAMb,KAAK,GAAG;MACVC,IAAI;MACJC,IAAI,EAAEU,SAAS;MACfb,MAAM,EAAEX,KAAK,CAACO,EAAE,CAACa,qBAAqB,CAACP,IAAI,EAAET,KAAK;IACtD,CAAC;IACD,IAAID,QAAQ,CAACC,KAAK,EAAE;MAChBQ,KAAK,CAACR,KAAK,GAAGA,KAAK;IACvB;IACA,OAAOQ,KAAK;EAChB,CAAC,CAAC;AACN;AACApB,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}