{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return parseAnimationValue;\n  }\n});\nconst DIRECTIONS = new Set([\"normal\", \"reverse\", \"alternate\", \"alternate-reverse\"]);\nconst PLAY_STATES = new Set([\"running\", \"paused\"]);\nconst FILL_MODES = new Set([\"none\", \"forwards\", \"backwards\", \"both\"]);\nconst ITERATION_COUNTS = new Set([\"infinite\"]);\nconst TIMINGS = new Set([\"linear\", \"ease\", \"ease-in\", \"ease-out\", \"ease-in-out\", \"step-start\", \"step-end\"]);\nconst TIMING_FNS = [\"cubic-bezier\", \"steps\"];\nconst COMMA = /\\,(?![^(]*\\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n;\n\nconst SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\n\nconst TIME = /^(-?[\\d.]+m?s)$/;\nconst DIGIT = /^(\\d+)$/;\nfunction parseAnimationValue(input) {\n  let animations = input.split(COMMA);\n  return animations.map(animation => {\n    let value = animation.trim();\n    let result = {\n      value\n    };\n    let parts = value.split(SPACE);\n    let seen = new Set();\n    for (let part of parts) {\n      if (!seen.has(\"DIRECTIONS\") && DIRECTIONS.has(part)) {\n        result.direction = part;\n        seen.add(\"DIRECTIONS\");\n      } else if (!seen.has(\"PLAY_STATES\") && PLAY_STATES.has(part)) {\n        result.playState = part;\n        seen.add(\"PLAY_STATES\");\n      } else if (!seen.has(\"FILL_MODES\") && FILL_MODES.has(part)) {\n        result.fillMode = part;\n        seen.add(\"FILL_MODES\");\n      } else if (!seen.has(\"ITERATION_COUNTS\") && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {\n        result.iterationCount = part;\n        seen.add(\"ITERATION_COUNTS\");\n      } else if (!seen.has(\"TIMING_FUNCTION\") && TIMINGS.has(part)) {\n        result.timingFunction = part;\n        seen.add(\"TIMING_FUNCTION\");\n      } else if (!seen.has(\"TIMING_FUNCTION\") && TIMING_FNS.some(f => part.startsWith(`${f}(`))) {\n        result.timingFunction = part;\n        seen.add(\"TIMING_FUNCTION\");\n      } else if (!seen.has(\"DURATION\") && TIME.test(part)) {\n        result.duration = part;\n        seen.add(\"DURATION\");\n      } else if (!seen.has(\"DELAY\") && TIME.test(part)) {\n        result.delay = part;\n        seen.add(\"DELAY\");\n      } else if (!seen.has(\"NAME\")) {\n        result.name = part;\n        seen.add(\"NAME\");\n      } else {\n        if (!result.unknown) result.unknown = [];\n        result.unknown.push(part);\n      }\n    }\n    return result;\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","parseAnimationValue","DIRECTIONS","Set","PLAY_STATES","FILL_MODES","ITERATION_COUNTS","TIMINGS","TIMING_FNS","COMMA","SPACE","TIME","DIGIT","input","animations","split","map","animation","trim","result","parts","seen","part","has","direction","add","playState","fillMode","test","iterationCount","timingFunction","some","f","startsWith","duration","delay","name","unknown","push"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/parseAnimationValue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return parseAnimationValue;\n    }\n});\nconst DIRECTIONS = new Set([\n    \"normal\",\n    \"reverse\",\n    \"alternate\",\n    \"alternate-reverse\"\n]);\nconst PLAY_STATES = new Set([\n    \"running\",\n    \"paused\"\n]);\nconst FILL_MODES = new Set([\n    \"none\",\n    \"forwards\",\n    \"backwards\",\n    \"both\"\n]);\nconst ITERATION_COUNTS = new Set([\n    \"infinite\"\n]);\nconst TIMINGS = new Set([\n    \"linear\",\n    \"ease\",\n    \"ease-in\",\n    \"ease-out\",\n    \"ease-in-out\",\n    \"step-start\",\n    \"step-end\"\n]);\nconst TIMING_FNS = [\n    \"cubic-bezier\",\n    \"steps\"\n];\nconst COMMA = /\\,(?![^(]*\\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n;\nconst SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\nconst TIME = /^(-?[\\d.]+m?s)$/;\nconst DIGIT = /^(\\d+)$/;\nfunction parseAnimationValue(input) {\n    let animations = input.split(COMMA);\n    return animations.map((animation)=>{\n        let value = animation.trim();\n        let result = {\n            value\n        };\n        let parts = value.split(SPACE);\n        let seen = new Set();\n        for (let part of parts){\n            if (!seen.has(\"DIRECTIONS\") && DIRECTIONS.has(part)) {\n                result.direction = part;\n                seen.add(\"DIRECTIONS\");\n            } else if (!seen.has(\"PLAY_STATES\") && PLAY_STATES.has(part)) {\n                result.playState = part;\n                seen.add(\"PLAY_STATES\");\n            } else if (!seen.has(\"FILL_MODES\") && FILL_MODES.has(part)) {\n                result.fillMode = part;\n                seen.add(\"FILL_MODES\");\n            } else if (!seen.has(\"ITERATION_COUNTS\") && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {\n                result.iterationCount = part;\n                seen.add(\"ITERATION_COUNTS\");\n            } else if (!seen.has(\"TIMING_FUNCTION\") && TIMINGS.has(part)) {\n                result.timingFunction = part;\n                seen.add(\"TIMING_FUNCTION\");\n            } else if (!seen.has(\"TIMING_FUNCTION\") && TIMING_FNS.some((f)=>part.startsWith(`${f}(`))) {\n                result.timingFunction = part;\n                seen.add(\"TIMING_FUNCTION\");\n            } else if (!seen.has(\"DURATION\") && TIME.test(part)) {\n                result.duration = part;\n                seen.add(\"DURATION\");\n            } else if (!seen.has(\"DELAY\") && TIME.test(part)) {\n                result.delay = part;\n                seen.add(\"DELAY\");\n            } else if (!seen.has(\"NAME\")) {\n                result.name = part;\n                seen.add(\"NAME\");\n            } else {\n                if (!result.unknown) result.unknown = [];\n                result.unknown.push(part);\n            }\n        }\n        return result;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}