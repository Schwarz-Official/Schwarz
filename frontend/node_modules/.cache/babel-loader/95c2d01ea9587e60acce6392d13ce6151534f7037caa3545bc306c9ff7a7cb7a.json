{"ast":null,"code":"import { charCodes } from \"./charcodes\";\nimport { WHITESPACE_CHARS } from \"./whitespace\";\nfunction computeIsIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code < 128) return false;\n  throw new Error(\"Should not be called with non-ASCII char code.\");\n}\nexport const IS_IDENTIFIER_CHAR = new Uint8Array(65536);\nfor (let i = 0; i < 128; i++) {\n  IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;\n}\nfor (let i = 128; i < 65536; i++) {\n  IS_IDENTIFIER_CHAR[i] = 1;\n}\n// Aside from whitespace and newlines, all characters outside the ASCII space are either\n// identifier characters or invalid. Since we're not performing code validation, we can just\n// treat all invalid characters as identifier characters.\nfor (const whitespaceChar of WHITESPACE_CHARS) {\n  IS_IDENTIFIER_CHAR[whitespaceChar] = 0;\n}\nIS_IDENTIFIER_CHAR[0x2028] = 0;\nIS_IDENTIFIER_CHAR[0x2029] = 0;\nexport const IS_IDENTIFIER_START = IS_IDENTIFIER_CHAR.slice();\nfor (let numChar = charCodes.digit0; numChar <= charCodes.digit9; numChar++) {\n  IS_IDENTIFIER_START[numChar] = 0;\n}","map":{"version":3,"names":["charCodes","WHITESPACE_CHARS","computeIsIdentifierChar","code","Error","IS_IDENTIFIER_CHAR","Uint8Array","i","whitespaceChar","IS_IDENTIFIER_START","slice","numChar","digit0","digit9"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/sucrase/dist/esm/parser/util/identifier.js"],"sourcesContent":["import {charCodes} from \"./charcodes\";\nimport {WHITESPACE_CHARS} from \"./whitespace\";\n\nfunction computeIsIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code < 128) return false;\n  throw new Error(\"Should not be called with non-ASCII char code.\");\n}\n\nexport const IS_IDENTIFIER_CHAR = new Uint8Array(65536);\nfor (let i = 0; i < 128; i++) {\n  IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;\n}\nfor (let i = 128; i < 65536; i++) {\n  IS_IDENTIFIER_CHAR[i] = 1;\n}\n// Aside from whitespace and newlines, all characters outside the ASCII space are either\n// identifier characters or invalid. Since we're not performing code validation, we can just\n// treat all invalid characters as identifier characters.\nfor (const whitespaceChar of WHITESPACE_CHARS) {\n  IS_IDENTIFIER_CHAR[whitespaceChar] = 0;\n}\nIS_IDENTIFIER_CHAR[0x2028] = 0;\nIS_IDENTIFIER_CHAR[0x2029] = 0;\n\nexport const IS_IDENTIFIER_START = IS_IDENTIFIER_CHAR.slice();\nfor (let numChar = charCodes.digit0; numChar <= charCodes.digit9; numChar++) {\n  IS_IDENTIFIER_START[numChar] = 0;\n}\n"],"mappings":"AAAA,SAAQA,SAAS,QAAO,aAAa;AACrC,SAAQC,gBAAgB,QAAO,cAAc;AAE7C,SAASC,uBAAuBA,CAACC,IAAI,EAAE;EACrC,IAAIA,IAAI,GAAG,EAAE,EAAE,OAAOA,IAAI,KAAK,EAAE;EACjC,IAAIA,IAAI,GAAG,EAAE,EAAE,OAAO,IAAI;EAC1B,IAAIA,IAAI,GAAG,EAAE,EAAE,OAAO,KAAK;EAC3B,IAAIA,IAAI,GAAG,EAAE,EAAE,OAAO,IAAI;EAC1B,IAAIA,IAAI,GAAG,EAAE,EAAE,OAAOA,IAAI,KAAK,EAAE;EACjC,IAAIA,IAAI,GAAG,GAAG,EAAE,OAAO,IAAI;EAC3B,IAAIA,IAAI,GAAG,GAAG,EAAE,OAAO,KAAK;EAC5B,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;AACnE;AAEA,OAAO,MAAMC,kBAAkB,GAAG,IAAIC,UAAU,CAAC,KAAK,CAAC;AACvD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EAC5BF,kBAAkB,CAACE,CAAC,CAAC,GAAGL,uBAAuB,CAACK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;AAC5D;AACA,KAAK,IAAIA,CAAC,GAAG,GAAG,EAAEA,CAAC,GAAG,KAAK,EAAEA,CAAC,EAAE,EAAE;EAChCF,kBAAkB,CAACE,CAAC,CAAC,GAAG,CAAC;AAC3B;AACA;AACA;AACA;AACA,KAAK,MAAMC,cAAc,IAAIP,gBAAgB,EAAE;EAC7CI,kBAAkB,CAACG,cAAc,CAAC,GAAG,CAAC;AACxC;AACAH,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC;AAC9BA,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC;AAE9B,OAAO,MAAMI,mBAAmB,GAAGJ,kBAAkB,CAACK,KAAK,CAAC,CAAC;AAC7D,KAAK,IAAIC,OAAO,GAAGX,SAAS,CAACY,MAAM,EAAED,OAAO,IAAIX,SAAS,CAACa,MAAM,EAAEF,OAAO,EAAE,EAAE;EAC3EF,mBAAmB,CAACE,OAAO,CAAC,GAAG,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}