{"ast":null,"code":"import { ContextualKeyword } from \"../parser/tokenizer/keywords\";\nimport { TokenType as tt } from \"../parser/tokenizer/types\";\n\n/**\n * Starting at a potential `with` or (legacy) `assert` token, remove the import\n * attributes if they exist.\n */\nexport function removeMaybeImportAttributes(tokens) {\n  if (tokens.matches2(tt._with, tt.braceL) || tokens.matches2(tt.name, tt.braceL) && tokens.matchesContextual(ContextualKeyword._assert)) {\n    // assert\n    tokens.removeToken();\n    // {\n    tokens.removeToken();\n    tokens.removeBalancedCode();\n    // }\n    tokens.removeToken();\n  }\n}","map":{"version":3,"names":["ContextualKeyword","TokenType","tt","removeMaybeImportAttributes","tokens","matches2","_with","braceL","name","matchesContextual","_assert","removeToken","removeBalancedCode"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/sucrase/dist/esm/util/removeMaybeImportAttributes.js"],"sourcesContent":["import {ContextualKeyword} from \"../parser/tokenizer/keywords\";\nimport {TokenType as tt} from \"../parser/tokenizer/types\";\n\n\n/**\n * Starting at a potential `with` or (legacy) `assert` token, remove the import\n * attributes if they exist.\n */\nexport function removeMaybeImportAttributes(tokens) {\n  if (\n    tokens.matches2(tt._with, tt.braceL) ||\n    (tokens.matches2(tt.name, tt.braceL) && tokens.matchesContextual(ContextualKeyword._assert))\n  ) {\n    // assert\n    tokens.removeToken();\n    // {\n    tokens.removeToken();\n    tokens.removeBalancedCode();\n    // }\n    tokens.removeToken();\n  }\n}\n"],"mappings":"AAAA,SAAQA,iBAAiB,QAAO,8BAA8B;AAC9D,SAAQC,SAAS,IAAIC,EAAE,QAAO,2BAA2B;;AAGzD;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2BA,CAACC,MAAM,EAAE;EAClD,IACEA,MAAM,CAACC,QAAQ,CAACH,EAAE,CAACI,KAAK,EAAEJ,EAAE,CAACK,MAAM,CAAC,IACnCH,MAAM,CAACC,QAAQ,CAACH,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACK,MAAM,CAAC,IAAIH,MAAM,CAACK,iBAAiB,CAACT,iBAAiB,CAACU,OAAO,CAAE,EAC5F;IACA;IACAN,MAAM,CAACO,WAAW,CAAC,CAAC;IACpB;IACAP,MAAM,CAACO,WAAW,CAAC,CAAC;IACpBP,MAAM,CAACQ,kBAAkB,CAAC,CAAC;IAC3B;IACAR,MAAM,CAACO,WAAW,CAAC,CAAC;EACtB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}