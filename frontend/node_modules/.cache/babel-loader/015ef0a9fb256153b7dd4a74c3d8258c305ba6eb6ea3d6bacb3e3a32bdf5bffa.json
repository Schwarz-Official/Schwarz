{"ast":null,"code":"import { TokenType as tt } from \"../parser/tokenizer/types\";\n\n/**\n * Get all identifier names in the code, in order, including duplicates.\n */\nexport default function getIdentifierNames(code, tokens) {\n  const names = [];\n  for (const token of tokens) {\n    if (token.type === tt.name) {\n      names.push(code.slice(token.start, token.end));\n    }\n  }\n  return names;\n}","map":{"version":3,"names":["TokenType","tt","getIdentifierNames","code","tokens","names","token","type","name","push","slice","start","end"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/sucrase/dist/esm/util/getIdentifierNames.js"],"sourcesContent":["\nimport {TokenType as tt} from \"../parser/tokenizer/types\";\n\n/**\n * Get all identifier names in the code, in order, including duplicates.\n */\nexport default function getIdentifierNames(code, tokens) {\n  const names = [];\n  for (const token of tokens) {\n    if (token.type === tt.name) {\n      names.push(code.slice(token.start, token.end));\n    }\n  }\n  return names;\n}\n"],"mappings":"AACA,SAAQA,SAAS,IAAIC,EAAE,QAAO,2BAA2B;;AAEzD;AACA;AACA;AACA,eAAe,SAASC,kBAAkBA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACvD,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMC,KAAK,IAAIF,MAAM,EAAE;IAC1B,IAAIE,KAAK,CAACC,IAAI,KAAKN,EAAE,CAACO,IAAI,EAAE;MAC1BH,KAAK,CAACI,IAAI,CAACN,IAAI,CAACO,KAAK,CAACJ,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACM,GAAG,CAAC,CAAC;IAChD;EACF;EACA,OAAOP,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}