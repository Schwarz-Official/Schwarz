{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils = require(\"../../utils\");\nconst partial_1 = require(\"../matchers/partial\");\nclass DeepFilter {\n  constructor(_settings, _micromatchOptions) {\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n  }\n  getFilter(basePath, positive, negative) {\n    const matcher = this._getMatcher(positive);\n    const negativeRe = this._getNegativePatternsRe(negative);\n    return entry => this._filter(basePath, entry, matcher, negativeRe);\n  }\n  _getMatcher(patterns) {\n    return new partial_1.default(patterns, this._settings, this._micromatchOptions);\n  }\n  _getNegativePatternsRe(patterns) {\n    const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\n    return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\n  }\n  _filter(basePath, entry, matcher, negativeRe) {\n    if (this._isSkippedByDeep(basePath, entry.path)) {\n      return false;\n    }\n    if (this._isSkippedSymbolicLink(entry)) {\n      return false;\n    }\n    const filepath = utils.path.removeLeadingDotSegment(entry.path);\n    if (this._isSkippedByPositivePatterns(filepath, matcher)) {\n      return false;\n    }\n    return this._isSkippedByNegativePatterns(filepath, negativeRe);\n  }\n  _isSkippedByDeep(basePath, entryPath) {\n    /**\n     * Avoid unnecessary depth calculations when it doesn't matter.\n     */\n    if (this._settings.deep === Infinity) {\n      return false;\n    }\n    return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\n  }\n  _getEntryLevel(basePath, entryPath) {\n    const entryPathDepth = entryPath.split('/').length;\n    if (basePath === '') {\n      return entryPathDepth;\n    }\n    const basePathDepth = basePath.split('/').length;\n    return entryPathDepth - basePathDepth;\n  }\n  _isSkippedSymbolicLink(entry) {\n    return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\n  }\n  _isSkippedByPositivePatterns(entryPath, matcher) {\n    return !this._settings.baseNameMatch && !matcher.match(entryPath);\n  }\n  _isSkippedByNegativePatterns(entryPath, patternsRe) {\n    return !utils.pattern.matchAny(entryPath, patternsRe);\n  }\n}\nexports.default = DeepFilter;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils","require","partial_1","DeepFilter","constructor","_settings","_micromatchOptions","getFilter","basePath","positive","negative","matcher","_getMatcher","negativeRe","_getNegativePatternsRe","entry","_filter","patterns","default","affectDepthOfReadingPatterns","filter","pattern","isAffectDepthOfReadingPattern","convertPatternsToRe","_isSkippedByDeep","path","_isSkippedSymbolicLink","filepath","removeLeadingDotSegment","_isSkippedByPositivePatterns","_isSkippedByNegativePatterns","entryPath","deep","Infinity","_getEntryLevel","entryPathDepth","split","length","basePathDepth","followSymbolicLinks","dirent","isSymbolicLink","baseNameMatch","match","patternsRe","matchAny"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/fast-glob/out/providers/filters/deep.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nconst partial_1 = require(\"../matchers/partial\");\nclass DeepFilter {\n    constructor(_settings, _micromatchOptions) {\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n    }\n    getFilter(basePath, positive, negative) {\n        const matcher = this._getMatcher(positive);\n        const negativeRe = this._getNegativePatternsRe(negative);\n        return (entry) => this._filter(basePath, entry, matcher, negativeRe);\n    }\n    _getMatcher(patterns) {\n        return new partial_1.default(patterns, this._settings, this._micromatchOptions);\n    }\n    _getNegativePatternsRe(patterns) {\n        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\n        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\n    }\n    _filter(basePath, entry, matcher, negativeRe) {\n        if (this._isSkippedByDeep(basePath, entry.path)) {\n            return false;\n        }\n        if (this._isSkippedSymbolicLink(entry)) {\n            return false;\n        }\n        const filepath = utils.path.removeLeadingDotSegment(entry.path);\n        if (this._isSkippedByPositivePatterns(filepath, matcher)) {\n            return false;\n        }\n        return this._isSkippedByNegativePatterns(filepath, negativeRe);\n    }\n    _isSkippedByDeep(basePath, entryPath) {\n        /**\n         * Avoid unnecessary depth calculations when it doesn't matter.\n         */\n        if (this._settings.deep === Infinity) {\n            return false;\n        }\n        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\n    }\n    _getEntryLevel(basePath, entryPath) {\n        const entryPathDepth = entryPath.split('/').length;\n        if (basePath === '') {\n            return entryPathDepth;\n        }\n        const basePathDepth = basePath.split('/').length;\n        return entryPathDepth - basePathDepth;\n    }\n    _isSkippedSymbolicLink(entry) {\n        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\n    }\n    _isSkippedByPositivePatterns(entryPath, matcher) {\n        return !this._settings.baseNameMatch && !matcher.match(entryPath);\n    }\n    _isSkippedByNegativePatterns(entryPath, patternsRe) {\n        return !utils.pattern.matchAny(entryPath, patternsRe);\n    }\n}\nexports.default = DeepFilter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}