{"ast":null,"code":"'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n * @returns {string}\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({\n    flipBackslashes: true\n  }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (enclosure.test(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};","map":{"version":3,"names":["isGlob","require","pathPosixDirname","posix","dirname","isWin32","platform","slash","backslash","enclosure","globby","escaped","module","exports","globParent","str","opts","options","Object","assign","flipBackslashes","indexOf","replace","test"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/fast-glob/node_modules/glob-parent/index.js"],"sourcesContent":["'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\n\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n * @returns {string}\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({ flipBackslashes: true }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (enclosure.test(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,MAAM,CAAC,CAACE,KAAK,CAACC,OAAO;AACpD,IAAIC,OAAO,GAAGJ,OAAO,CAAC,IAAI,CAAC,CAACK,QAAQ,CAAC,CAAC,KAAK,OAAO;AAElD,IAAIC,KAAK,GAAG,GAAG;AACf,IAAIC,SAAS,GAAG,KAAK;AACrB,IAAIC,SAAS,GAAG,iBAAiB;AACjC,IAAIC,MAAM,GAAG,6BAA6B;AAC1C,IAAIC,OAAO,GAAG,6BAA6B;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,UAAUA,CAACC,GAAG,EAAEC,IAAI,EAAE;EAC9C,IAAIC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC;IAAEC,eAAe,EAAE;EAAK,CAAC,EAAEJ,IAAI,CAAC;;EAE5D;EACA,IAAIC,OAAO,CAACG,eAAe,IAAIf,OAAO,IAAIU,GAAG,CAACM,OAAO,CAACd,KAAK,CAAC,GAAG,CAAC,EAAE;IAChEQ,GAAG,GAAGA,GAAG,CAACO,OAAO,CAACd,SAAS,EAAED,KAAK,CAAC;EACrC;;EAEA;EACA,IAAIE,SAAS,CAACc,IAAI,CAACR,GAAG,CAAC,EAAE;IACvBA,GAAG,IAAIR,KAAK;EACd;;EAEA;EACAQ,GAAG,IAAI,GAAG;;EAEV;EACA,GAAG;IACDA,GAAG,GAAGb,gBAAgB,CAACa,GAAG,CAAC;EAC7B,CAAC,QAAQf,MAAM,CAACe,GAAG,CAAC,IAAIL,MAAM,CAACa,IAAI,CAACR,GAAG,CAAC;;EAExC;EACA,OAAOA,GAAG,CAACO,OAAO,CAACX,OAAO,EAAE,IAAI,CAAC;AACnC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}