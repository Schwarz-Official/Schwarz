{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports,\n/**\n* @template {string | import('postcss-selector-parser').Root} T\n*\n* Prefix all classes in the selector with the given prefix\n*\n* It can take either a string or a selector AST and will return the same type\n*\n* @param {string} prefix\n* @param {T} selector\n* @param {boolean} prependNegative\n* @returns {T}\n*/\n\"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\nconst _postcssselectorparser = /*#__PURE__*/_interop_require_default(require(\"postcss-selector-parser\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _default(prefix, selector, prependNegative = false) {\n  if (prefix === \"\") {\n    return selector;\n  }\n  /** @type {import('postcss-selector-parser').Root} */\n  let ast = typeof selector === \"string\" ? (0, _postcssselectorparser.default)().astSync(selector) : selector;\n  ast.walkClasses(classSelector => {\n    let baseClass = classSelector.value;\n    let shouldPlaceNegativeBeforePrefix = prependNegative && baseClass.startsWith(\"-\");\n    classSelector.value = shouldPlaceNegativeBeforePrefix ? `-${prefix}${baseClass.slice(1)}` : `${prefix}${baseClass}`;\n  });\n  return typeof selector === \"string\" ? ast.toString() : ast;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","_default","_postcssselectorparser","_interop_require_default","require","obj","__esModule","default","prefix","selector","prependNegative","ast","astSync","walkClasses","classSelector","baseClass","shouldPlaceNegativeBeforePrefix","startsWith","slice","toString"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/prefixSelector.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, /**\n * @template {string | import('postcss-selector-parser').Root} T\n *\n * Prefix all classes in the selector with the given prefix\n *\n * It can take either a string or a selector AST and will return the same type\n *\n * @param {string} prefix\n * @param {T} selector\n * @param {boolean} prependNegative\n * @returns {T}\n */ \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nconst _postcssselectorparser = /*#__PURE__*/ _interop_require_default(require(\"postcss-selector-parser\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _default(prefix, selector, prependNegative = false) {\n    if (prefix === \"\") {\n        return selector;\n    }\n    /** @type {import('postcss-selector-parser').Root} */ let ast = typeof selector === \"string\" ? (0, _postcssselectorparser.default)().astSync(selector) : selector;\n    ast.walkClasses((classSelector)=>{\n        let baseClass = classSelector.value;\n        let shouldPlaceNegativeBeforePrefix = prependNegative && baseClass.startsWith(\"-\");\n        classSelector.value = shouldPlaceNegativeBeforePrefix ? `-${prefix}${baseClass.slice(1)}` : `${prefix}${baseClass}`;\n    });\n    return typeof selector === \"string\" ? ast.toString() : ast;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO;AAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,SAAS,EAAE;EACXE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,QAAQ;EACnB;AACJ,CAAC,CAAC;AACF,MAAMC,sBAAsB,GAAG,aAAcC,wBAAwB,CAACC,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACzG,SAASD,wBAAwBA,CAACE,GAAG,EAAE;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IACjCE,OAAO,EAAEF;EACb,CAAC;AACL;AACA,SAASJ,QAAQA,CAACO,MAAM,EAAEC,QAAQ,EAAEC,eAAe,GAAG,KAAK,EAAE;EACzD,IAAIF,MAAM,KAAK,EAAE,EAAE;IACf,OAAOC,QAAQ;EACnB;EACA;EAAsD,IAAIE,GAAG,GAAG,OAAOF,QAAQ,KAAK,QAAQ,GAAG,CAAC,CAAC,EAAEP,sBAAsB,CAACK,OAAO,EAAE,CAAC,CAACK,OAAO,CAACH,QAAQ,CAAC,GAAGA,QAAQ;EACjKE,GAAG,CAACE,WAAW,CAAEC,aAAa,IAAG;IAC7B,IAAIC,SAAS,GAAGD,aAAa,CAAChB,KAAK;IACnC,IAAIkB,+BAA+B,GAAGN,eAAe,IAAIK,SAAS,CAACE,UAAU,CAAC,GAAG,CAAC;IAClFH,aAAa,CAAChB,KAAK,GAAGkB,+BAA+B,GAAI,IAAGR,MAAO,GAAEO,SAAS,CAACG,KAAK,CAAC,CAAC,CAAE,EAAC,GAAI,GAAEV,MAAO,GAAEO,SAAU,EAAC;EACvH,CAAC,CAAC;EACF,OAAO,OAAON,QAAQ,KAAK,QAAQ,GAAGE,GAAG,CAACQ,QAAQ,CAAC,CAAC,GAAGR,GAAG;AAC9D"},"metadata":{},"sourceType":"script","externalDependencies":[]}