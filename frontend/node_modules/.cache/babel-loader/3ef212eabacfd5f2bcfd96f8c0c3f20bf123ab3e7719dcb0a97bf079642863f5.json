{"ast":null,"code":"/**\n * Parse a path string into an array of path segments.\n *\n * Square bracket notation `a[b]` may be used to \"escape\" dots that would otherwise be interpreted as path separators.\n *\n * Example:\n * a -> ['a']\n * a.b.c -> ['a', 'b', 'c']\n * a[b].c -> ['a', 'b', 'c']\n * a[b.c].e.f -> ['a', 'b.c', 'e', 'f']\n * a[b][c][d] -> ['a', 'b', 'c', 'd']\n *\n * @param {string|string[]} path\n **/\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"toPath\", {\n  enumerable: true,\n  get: function () {\n    return toPath;\n  }\n});\nfunction toPath(path) {\n  if (Array.isArray(path)) return path;\n  let openBrackets = path.split(\"[\").length - 1;\n  let closedBrackets = path.split(\"]\").length - 1;\n  if (openBrackets !== closedBrackets) {\n    throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`);\n  }\n  return path.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","toPath","path","Array","isArray","openBrackets","split","length","closedBrackets","Error","filter","Boolean"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/tailwindcss/lib/util/toPath.js"],"sourcesContent":["/**\n * Parse a path string into an array of path segments.\n *\n * Square bracket notation `a[b]` may be used to \"escape\" dots that would otherwise be interpreted as path separators.\n *\n * Example:\n * a -> ['a']\n * a.b.c -> ['a', 'b', 'c']\n * a[b].c -> ['a', 'b', 'c']\n * a[b.c].e.f -> ['a', 'b.c', 'e', 'f']\n * a[b][c][d] -> ['a', 'b', 'c', 'd']\n *\n * @param {string|string[]} path\n **/ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"toPath\", {\n    enumerable: true,\n    get: function() {\n        return toPath;\n    }\n});\nfunction toPath(path) {\n    if (Array.isArray(path)) return path;\n    let openBrackets = path.split(\"[\").length - 1;\n    let closedBrackets = path.split(\"]\").length - 1;\n    if (openBrackets !== closedBrackets) {\n        throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`);\n    }\n    return path.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAK,YAAY;;AACjBA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,QAAQ,EAAE;EACrCE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,MAAM;EACjB;AACJ,CAAC,CAAC;AACF,SAASA,MAAMA,CAACC,IAAI,EAAE;EAClB,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE,OAAOA,IAAI;EACpC,IAAIG,YAAY,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC;EAC7C,IAAIC,cAAc,GAAGN,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC;EAC/C,IAAIF,YAAY,KAAKG,cAAc,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAE,6CAA4CP,IAAK,EAAC,CAAC;EACxE;EACA,OAAOA,IAAI,CAACI,KAAK,CAAC,wBAAwB,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC;AAC/D"},"metadata":{},"sourceType":"script","externalDependencies":[]}