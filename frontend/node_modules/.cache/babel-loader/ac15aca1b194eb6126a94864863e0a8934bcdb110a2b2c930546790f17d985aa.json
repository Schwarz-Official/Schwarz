{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst rpl = require(\"run-parallel\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings, callback) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    readdirWithFileTypes(directory, settings, callback);\n    return;\n  }\n  readdir(directory, settings, callback);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings, callback) {\n  settings.fs.readdir(directory, {\n    withFileTypes: true\n  }, (readdirError, dirents) => {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n    const entries = dirents.map(dirent => ({\n      dirent,\n      name: dirent.name,\n      path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n    }));\n    if (!settings.followSymbolicLinks) {\n      callSuccessCallback(callback, entries);\n      return;\n    }\n    const tasks = entries.map(entry => makeRplTaskEntry(entry, settings));\n    rpl(tasks, (rplError, rplEntries) => {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n      callSuccessCallback(callback, rplEntries);\n    });\n  });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction makeRplTaskEntry(entry, settings) {\n  return done => {\n    if (!entry.dirent.isSymbolicLink()) {\n      done(null, entry);\n      return;\n    }\n    settings.fs.stat(entry.path, (statError, stats) => {\n      if (statError !== null) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          done(statError);\n          return;\n        }\n        done(null, entry);\n        return;\n      }\n      entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      done(null, entry);\n    });\n  };\n}\nfunction readdir(directory, settings, callback) {\n  settings.fs.readdir(directory, (readdirError, names) => {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n    const tasks = names.map(name => {\n      const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n      return done => {\n        fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n          if (error !== null) {\n            done(error);\n            return;\n          }\n          const entry = {\n            name,\n            path,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n          };\n          if (settings.stats) {\n            entry.stats = stats;\n          }\n          done(null, entry);\n        });\n      };\n    });\n    rpl(tasks, (rplError, entries) => {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n      callSuccessCallback(callback, entries);\n    });\n  });\n}\nexports.readdir = readdir;\nfunction callFailureCallback(callback, error) {\n  callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n  callback(null, result);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","readdir","readdirWithFileTypes","read","fsStat","require","rpl","constants_1","utils","common","directory","settings","callback","stats","IS_SUPPORT_READDIR_WITH_FILE_TYPES","fs","withFileTypes","readdirError","dirents","callFailureCallback","entries","map","dirent","name","path","joinPathSegments","pathSegmentSeparator","followSymbolicLinks","callSuccessCallback","tasks","entry","makeRplTaskEntry","rplError","rplEntries","done","isSymbolicLink","stat","statError","throwErrorOnBrokenSymbolicLink","createDirentFromStats","names","fsStatSettings","error","result"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/@nodelib/fs.scandir/out/providers/async.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst rpl = require(\"run-parallel\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings, callback) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        readdirWithFileTypes(directory, settings, callback);\n        return;\n    }\n    readdir(directory, settings, callback);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings, callback) {\n    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const entries = dirents.map((dirent) => ({\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        }));\n        if (!settings.followSymbolicLinks) {\n            callSuccessCallback(callback, entries);\n            return;\n        }\n        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));\n        rpl(tasks, (rplError, rplEntries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, rplEntries);\n        });\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction makeRplTaskEntry(entry, settings) {\n    return (done) => {\n        if (!entry.dirent.isSymbolicLink()) {\n            done(null, entry);\n            return;\n        }\n        settings.fs.stat(entry.path, (statError, stats) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    done(statError);\n                    return;\n                }\n                done(null, entry);\n                return;\n            }\n            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            done(null, entry);\n        });\n    };\n}\nfunction readdir(directory, settings, callback) {\n    settings.fs.readdir(directory, (readdirError, names) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const tasks = names.map((name) => {\n            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n            return (done) => {\n                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n                    if (error !== null) {\n                        done(error);\n                        return;\n                    }\n                    const entry = {\n                        name,\n                        path,\n                        dirent: utils.fs.createDirentFromStats(name, stats)\n                    };\n                    if (settings.stats) {\n                        entry.stats = stats;\n                    }\n                    done(null, entry);\n                });\n            };\n        });\n        rpl(tasks, (rplError, entries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, entries);\n        });\n    });\n}\nexports.readdir = readdir;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}