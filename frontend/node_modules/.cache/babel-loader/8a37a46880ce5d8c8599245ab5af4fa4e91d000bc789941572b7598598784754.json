{"ast":null,"code":"\"use strict\";\n\nconst taskManager = require(\"./managers/tasks\");\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nconst utils = require(\"./utils\");\nasync function FastGlob(source, options) {\n  assertPatternsInput(source);\n  const works = getWorks(source, async_1.default, options);\n  const result = await Promise.all(works);\n  return utils.array.flatten(result);\n}\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n(function (FastGlob) {\n  FastGlob.glob = FastGlob;\n  FastGlob.globSync = sync;\n  FastGlob.globStream = stream;\n  FastGlob.async = FastGlob;\n  function sync(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, sync_1.default, options);\n    return utils.array.flatten(works);\n  }\n  FastGlob.sync = sync;\n  function stream(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, stream_1.default, options);\n    /**\n     * The stream returned by the provider cannot work with an asynchronous iterator.\n     * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\n     * This affects performance (+25%). I don't see best solution right now.\n     */\n    return utils.stream.merge(works);\n  }\n  FastGlob.stream = stream;\n  function generateTasks(source, options) {\n    assertPatternsInput(source);\n    const patterns = [].concat(source);\n    const settings = new settings_1.default(options);\n    return taskManager.generate(patterns, settings);\n  }\n  FastGlob.generateTasks = generateTasks;\n  function isDynamicPattern(source, options) {\n    assertPatternsInput(source);\n    const settings = new settings_1.default(options);\n    return utils.pattern.isDynamicPattern(source, settings);\n  }\n  FastGlob.isDynamicPattern = isDynamicPattern;\n  function escapePath(source) {\n    assertPatternsInput(source);\n    return utils.path.escape(source);\n  }\n  FastGlob.escapePath = escapePath;\n  function convertPathToPattern(source) {\n    assertPatternsInput(source);\n    return utils.path.convertPathToPattern(source);\n  }\n  FastGlob.convertPathToPattern = convertPathToPattern;\n  let posix;\n  (function (posix) {\n    function escapePath(source) {\n      assertPatternsInput(source);\n      return utils.path.escapePosixPath(source);\n    }\n    posix.escapePath = escapePath;\n    function convertPathToPattern(source) {\n      assertPatternsInput(source);\n      return utils.path.convertPosixPathToPattern(source);\n    }\n    posix.convertPathToPattern = convertPathToPattern;\n  })(posix = FastGlob.posix || (FastGlob.posix = {}));\n  let win32;\n  (function (win32) {\n    function escapePath(source) {\n      assertPatternsInput(source);\n      return utils.path.escapeWindowsPath(source);\n    }\n    win32.escapePath = escapePath;\n    function convertPathToPattern(source) {\n      assertPatternsInput(source);\n      return utils.path.convertWindowsPathToPattern(source);\n    }\n    win32.convertPathToPattern = convertPathToPattern;\n  })(win32 = FastGlob.win32 || (FastGlob.win32 = {}));\n})(FastGlob || (FastGlob = {}));\nfunction getWorks(source, _Provider, options) {\n  const patterns = [].concat(source);\n  const settings = new settings_1.default(options);\n  const tasks = taskManager.generate(patterns, settings);\n  const provider = new _Provider(settings);\n  return tasks.map(provider.read, provider);\n}\nfunction assertPatternsInput(input) {\n  const source = [].concat(input);\n  const isValidSource = source.every(item => utils.string.isString(item) && !utils.string.isEmpty(item));\n  if (!isValidSource) {\n    throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n  }\n}\nmodule.exports = FastGlob;","map":{"version":3,"names":["taskManager","require","async_1","stream_1","sync_1","settings_1","utils","FastGlob","source","options","assertPatternsInput","works","getWorks","default","result","Promise","all","array","flatten","glob","globSync","sync","globStream","stream","async","merge","generateTasks","patterns","concat","settings","generate","isDynamicPattern","pattern","escapePath","path","escape","convertPathToPattern","posix","escapePosixPath","convertPosixPathToPattern","win32","escapeWindowsPath","convertWindowsPathToPattern","_Provider","tasks","provider","map","read","input","isValidSource","every","item","string","isString","isEmpty","TypeError","module","exports"],"sources":["D:/WEB-PROJECT/Schwarz/frontend/node_modules/fast-glob/out/index.js"],"sourcesContent":["\"use strict\";\nconst taskManager = require(\"./managers/tasks\");\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nconst utils = require(\"./utils\");\nasync function FastGlob(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, async_1.default, options);\n    const result = await Promise.all(works);\n    return utils.array.flatten(result);\n}\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n(function (FastGlob) {\n    FastGlob.glob = FastGlob;\n    FastGlob.globSync = sync;\n    FastGlob.globStream = stream;\n    FastGlob.async = FastGlob;\n    function sync(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, sync_1.default, options);\n        return utils.array.flatten(works);\n    }\n    FastGlob.sync = sync;\n    function stream(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, stream_1.default, options);\n        /**\n         * The stream returned by the provider cannot work with an asynchronous iterator.\n         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\n         * This affects performance (+25%). I don't see best solution right now.\n         */\n        return utils.stream.merge(works);\n    }\n    FastGlob.stream = stream;\n    function generateTasks(source, options) {\n        assertPatternsInput(source);\n        const patterns = [].concat(source);\n        const settings = new settings_1.default(options);\n        return taskManager.generate(patterns, settings);\n    }\n    FastGlob.generateTasks = generateTasks;\n    function isDynamicPattern(source, options) {\n        assertPatternsInput(source);\n        const settings = new settings_1.default(options);\n        return utils.pattern.isDynamicPattern(source, settings);\n    }\n    FastGlob.isDynamicPattern = isDynamicPattern;\n    function escapePath(source) {\n        assertPatternsInput(source);\n        return utils.path.escape(source);\n    }\n    FastGlob.escapePath = escapePath;\n    function convertPathToPattern(source) {\n        assertPatternsInput(source);\n        return utils.path.convertPathToPattern(source);\n    }\n    FastGlob.convertPathToPattern = convertPathToPattern;\n    let posix;\n    (function (posix) {\n        function escapePath(source) {\n            assertPatternsInput(source);\n            return utils.path.escapePosixPath(source);\n        }\n        posix.escapePath = escapePath;\n        function convertPathToPattern(source) {\n            assertPatternsInput(source);\n            return utils.path.convertPosixPathToPattern(source);\n        }\n        posix.convertPathToPattern = convertPathToPattern;\n    })(posix = FastGlob.posix || (FastGlob.posix = {}));\n    let win32;\n    (function (win32) {\n        function escapePath(source) {\n            assertPatternsInput(source);\n            return utils.path.escapeWindowsPath(source);\n        }\n        win32.escapePath = escapePath;\n        function convertPathToPattern(source) {\n            assertPatternsInput(source);\n            return utils.path.convertWindowsPathToPattern(source);\n        }\n        win32.convertPathToPattern = convertPathToPattern;\n    })(win32 = FastGlob.win32 || (FastGlob.win32 = {}));\n})(FastGlob || (FastGlob = {}));\nfunction getWorks(source, _Provider, options) {\n    const patterns = [].concat(source);\n    const settings = new settings_1.default(options);\n    const tasks = taskManager.generate(patterns, settings);\n    const provider = new _Provider(settings);\n    return tasks.map(provider.read, provider);\n}\nfunction assertPatternsInput(input) {\n    const source = [].concat(input);\n    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));\n    if (!isValidSource) {\n        throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n    }\n}\nmodule.exports = FastGlob;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC/C,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAME,QAAQ,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC9C,MAAMG,MAAM,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAMI,UAAU,GAAGJ,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMK,KAAK,GAAGL,OAAO,CAAC,SAAS,CAAC;AAChC,eAAeM,QAAQA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACrCC,mBAAmB,CAACF,MAAM,CAAC;EAC3B,MAAMG,KAAK,GAAGC,QAAQ,CAACJ,MAAM,EAAEN,OAAO,CAACW,OAAO,EAAEJ,OAAO,CAAC;EACxD,MAAMK,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EACvC,OAAOL,KAAK,CAACW,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC;AACtC;AACA;AACA;AACA,CAAC,UAAUP,QAAQ,EAAE;EACjBA,QAAQ,CAACY,IAAI,GAAGZ,QAAQ;EACxBA,QAAQ,CAACa,QAAQ,GAAGC,IAAI;EACxBd,QAAQ,CAACe,UAAU,GAAGC,MAAM;EAC5BhB,QAAQ,CAACiB,KAAK,GAAGjB,QAAQ;EACzB,SAASc,IAAIA,CAACb,MAAM,EAAEC,OAAO,EAAE;IAC3BC,mBAAmB,CAACF,MAAM,CAAC;IAC3B,MAAMG,KAAK,GAAGC,QAAQ,CAACJ,MAAM,EAAEJ,MAAM,CAACS,OAAO,EAAEJ,OAAO,CAAC;IACvD,OAAOH,KAAK,CAACW,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC;EACrC;EACAJ,QAAQ,CAACc,IAAI,GAAGA,IAAI;EACpB,SAASE,MAAMA,CAACf,MAAM,EAAEC,OAAO,EAAE;IAC7BC,mBAAmB,CAACF,MAAM,CAAC;IAC3B,MAAMG,KAAK,GAAGC,QAAQ,CAACJ,MAAM,EAAEL,QAAQ,CAACU,OAAO,EAAEJ,OAAO,CAAC;IACzD;AACR;AACA;AACA;AACA;IACQ,OAAOH,KAAK,CAACiB,MAAM,CAACE,KAAK,CAACd,KAAK,CAAC;EACpC;EACAJ,QAAQ,CAACgB,MAAM,GAAGA,MAAM;EACxB,SAASG,aAAaA,CAAClB,MAAM,EAAEC,OAAO,EAAE;IACpCC,mBAAmB,CAACF,MAAM,CAAC;IAC3B,MAAMmB,QAAQ,GAAG,EAAE,CAACC,MAAM,CAACpB,MAAM,CAAC;IAClC,MAAMqB,QAAQ,GAAG,IAAIxB,UAAU,CAACQ,OAAO,CAACJ,OAAO,CAAC;IAChD,OAAOT,WAAW,CAAC8B,QAAQ,CAACH,QAAQ,EAAEE,QAAQ,CAAC;EACnD;EACAtB,QAAQ,CAACmB,aAAa,GAAGA,aAAa;EACtC,SAASK,gBAAgBA,CAACvB,MAAM,EAAEC,OAAO,EAAE;IACvCC,mBAAmB,CAACF,MAAM,CAAC;IAC3B,MAAMqB,QAAQ,GAAG,IAAIxB,UAAU,CAACQ,OAAO,CAACJ,OAAO,CAAC;IAChD,OAAOH,KAAK,CAAC0B,OAAO,CAACD,gBAAgB,CAACvB,MAAM,EAAEqB,QAAQ,CAAC;EAC3D;EACAtB,QAAQ,CAACwB,gBAAgB,GAAGA,gBAAgB;EAC5C,SAASE,UAAUA,CAACzB,MAAM,EAAE;IACxBE,mBAAmB,CAACF,MAAM,CAAC;IAC3B,OAAOF,KAAK,CAAC4B,IAAI,CAACC,MAAM,CAAC3B,MAAM,CAAC;EACpC;EACAD,QAAQ,CAAC0B,UAAU,GAAGA,UAAU;EAChC,SAASG,oBAAoBA,CAAC5B,MAAM,EAAE;IAClCE,mBAAmB,CAACF,MAAM,CAAC;IAC3B,OAAOF,KAAK,CAAC4B,IAAI,CAACE,oBAAoB,CAAC5B,MAAM,CAAC;EAClD;EACAD,QAAQ,CAAC6B,oBAAoB,GAAGA,oBAAoB;EACpD,IAAIC,KAAK;EACT,CAAC,UAAUA,KAAK,EAAE;IACd,SAASJ,UAAUA,CAACzB,MAAM,EAAE;MACxBE,mBAAmB,CAACF,MAAM,CAAC;MAC3B,OAAOF,KAAK,CAAC4B,IAAI,CAACI,eAAe,CAAC9B,MAAM,CAAC;IAC7C;IACA6B,KAAK,CAACJ,UAAU,GAAGA,UAAU;IAC7B,SAASG,oBAAoBA,CAAC5B,MAAM,EAAE;MAClCE,mBAAmB,CAACF,MAAM,CAAC;MAC3B,OAAOF,KAAK,CAAC4B,IAAI,CAACK,yBAAyB,CAAC/B,MAAM,CAAC;IACvD;IACA6B,KAAK,CAACD,oBAAoB,GAAGA,oBAAoB;EACrD,CAAC,EAAEC,KAAK,GAAG9B,QAAQ,CAAC8B,KAAK,KAAK9B,QAAQ,CAAC8B,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EACnD,IAAIG,KAAK;EACT,CAAC,UAAUA,KAAK,EAAE;IACd,SAASP,UAAUA,CAACzB,MAAM,EAAE;MACxBE,mBAAmB,CAACF,MAAM,CAAC;MAC3B,OAAOF,KAAK,CAAC4B,IAAI,CAACO,iBAAiB,CAACjC,MAAM,CAAC;IAC/C;IACAgC,KAAK,CAACP,UAAU,GAAGA,UAAU;IAC7B,SAASG,oBAAoBA,CAAC5B,MAAM,EAAE;MAClCE,mBAAmB,CAACF,MAAM,CAAC;MAC3B,OAAOF,KAAK,CAAC4B,IAAI,CAACQ,2BAA2B,CAAClC,MAAM,CAAC;IACzD;IACAgC,KAAK,CAACJ,oBAAoB,GAAGA,oBAAoB;EACrD,CAAC,EAAEI,KAAK,GAAGjC,QAAQ,CAACiC,KAAK,KAAKjC,QAAQ,CAACiC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,EAAEjC,QAAQ,KAAKA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/B,SAASK,QAAQA,CAACJ,MAAM,EAAEmC,SAAS,EAAElC,OAAO,EAAE;EAC1C,MAAMkB,QAAQ,GAAG,EAAE,CAACC,MAAM,CAACpB,MAAM,CAAC;EAClC,MAAMqB,QAAQ,GAAG,IAAIxB,UAAU,CAACQ,OAAO,CAACJ,OAAO,CAAC;EAChD,MAAMmC,KAAK,GAAG5C,WAAW,CAAC8B,QAAQ,CAACH,QAAQ,EAAEE,QAAQ,CAAC;EACtD,MAAMgB,QAAQ,GAAG,IAAIF,SAAS,CAACd,QAAQ,CAAC;EACxC,OAAOe,KAAK,CAACE,GAAG,CAACD,QAAQ,CAACE,IAAI,EAAEF,QAAQ,CAAC;AAC7C;AACA,SAASnC,mBAAmBA,CAACsC,KAAK,EAAE;EAChC,MAAMxC,MAAM,GAAG,EAAE,CAACoB,MAAM,CAACoB,KAAK,CAAC;EAC/B,MAAMC,aAAa,GAAGzC,MAAM,CAAC0C,KAAK,CAAEC,IAAI,IAAK7C,KAAK,CAAC8C,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,IAAI,CAAC7C,KAAK,CAAC8C,MAAM,CAACE,OAAO,CAACH,IAAI,CAAC,CAAC;EACxG,IAAI,CAACF,aAAa,EAAE;IAChB,MAAM,IAAIM,SAAS,CAAC,8DAA8D,CAAC;EACvF;AACJ;AACAC,MAAM,CAACC,OAAO,GAAGlD,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}