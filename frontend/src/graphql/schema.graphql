schema {
  query: IsAuthenticated
  mutation: Mutation
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input ActivateUserInput {
  uid: String!
  token: String!
  clientMutationId: String
}

type ActivateUserPayload {
  user: UserType
  clientMutationId: String
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type IsAuthenticated {
  isAuthenticated: Boolean
}

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginPayload {
  user: UserType
  token: String
  refreshToken: String
  clientMutationId: String
}

type Mutation {
  register(input: RegisterInput!): RegisterPayload
  activateUser(input: ActivateUserInput!): ActivateUserPayload
  resendActivationEmail(input: ResendActivationEmailInput!): ResendActivationEmailPayload
  login(input: LoginInput!): LoginPayload
  passwordReset(input: PasswordResetInput!): PasswordResetPayload
  passwordResetConfirm(input: PasswordResetConfirmInput!): PasswordResetConfirmPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

input PasswordResetConfirmInput {
  uid: String!
  token: String!
  newPassword: String!
  clientMutationId: String
}

type PasswordResetConfirmPayload {
  success: Boolean
  clientMutationId: String
}

input PasswordResetInput {
  email: String!
  clientMutationId: String
}

type PasswordResetPayload {
  success: Boolean
  clientMutationId: String
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  dateOfBirth: Date!
  gender: String!
  address: String!
  preferredLang: String!
  company: String!
  jobTitle: String!
  industry: String!
  experience: Int!
  clientMutationId: String
}

type RegisterPayload {
  user: UserType
  clientMutationId: String
}

input ResendActivationEmailInput {
  email: String!
  clientMutationId: String
}

type ResendActivationEmailPayload {
  success: Boolean
  clientMutationId: String
}

type UserType implements Node {
  password: String!
  lastLogin: DateTime

  """The ID of the object"""
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  dateOfBirth: Date!
  gender: String!
  address: String!
  preferredLang: String!
  company: String!
  jobTitle: String!
  industry: String!
  experience: Int!
  isActive: Boolean!
  isAdmin: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

