schema {
  query: IsAuthenticated
  mutation: Mutation
}

input ActivateUserInput {
  clientMutationId: String
  token: String!
  uid: String!
}

type ActivateUserPayload {
  clientMutationId: String
  user: UserType
}

"""The `Date` scalar represents an ISO-8601 compliant date type."""
scalar Date

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

type IsAuthenticated {
  isAuthenticated: Boolean
}

input LoginInput {
  clientMutationId: String
  email: String!
  password: String!
}

type LoginPayload {
  clientMutationId: String
  refreshToken: String
  token: String
  user: UserType
}

type Mutation {
  activateUser(input: ActivateUserInput!): ActivateUserPayload
  login(input: LoginInput!): LoginPayload
  passwordReset(input: PasswordResetInput!): PasswordResetPayload
  passwordResetConfirm(input: PasswordResetConfirmInput!): PasswordResetConfirmPayload
  register(input: RegisterInput!): RegisterPayload
  resendActivationEmail(input: ResendActivationEmailInput!): ResendActivationEmailPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

input PasswordResetConfirmInput {
  clientMutationId: String
  newPassword: String!
  token: String!
  uid: String!
}

type PasswordResetConfirmPayload {
  clientMutationId: String
  success: Boolean
}

input PasswordResetInput {
  clientMutationId: String
  email: String!
}

type PasswordResetPayload {
  clientMutationId: String
  success: Boolean
}

input RegisterInput {
  address: String!
  clientMutationId: String
  company: String!
  dateOfBirth: Date!
  email: String!
  experience: Int!
  firstName: String!
  gender: String!
  industry: String!
  jobTitle: String!
  lastName: String!
  password: String!
  preferredLang: String!
}

type RegisterPayload {
  clientMutationId: String
  user: UserType
}

input ResendActivationEmailInput {
  clientMutationId: String
  email: String!
}

type ResendActivationEmailPayload {
  clientMutationId: String
  success: Boolean
}

type UserType implements Node {
  address: String!
  company: String!
  createdAt: DateTime!
  dateOfBirth: Date!
  email: String!
  experience: Int!
  firstName: String!
  gender: String!

  """The ID of the object"""
  id: ID!
  industry: String!
  isActive: Boolean!
  isAdmin: Boolean!
  jobTitle: String!
  lastLogin: DateTime
  lastName: String!
  password: String!
  preferredLang: String!
  updatedAt: DateTime!
}

